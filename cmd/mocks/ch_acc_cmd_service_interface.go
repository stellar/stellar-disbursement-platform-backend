// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/stellar/stellar-disbursement-platform-backend/db"
	mock "github.com/stretchr/testify/mock"

	services "github.com/stellar/stellar-disbursement-platform-backend/internal/transactionsubmission/services"
)

// MockChAccCmdServiceInterface is an autogenerated mock type for the ChAccCmdServiceInterface type
type MockChAccCmdServiceInterface struct {
	mock.Mock
}

// CreateChannelAccounts provides a mock function with given fields: ctx, chAccService, count
func (_m *MockChAccCmdServiceInterface) CreateChannelAccounts(ctx context.Context, chAccService services.ChannelAccountsService, count int) error {
	ret := _m.Called(ctx, chAccService, count)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannelAccounts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, services.ChannelAccountsService, int) error); ok {
		r0 = rf(ctx, chAccService, count)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteChannelAccount provides a mock function with given fields: ctx, chAccService, opts
func (_m *MockChAccCmdServiceInterface) DeleteChannelAccount(ctx context.Context, chAccService services.ChannelAccountsService, opts services.DeleteChannelAccountsOptions) error {
	ret := _m.Called(ctx, chAccService, opts)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannelAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, services.ChannelAccountsService, services.DeleteChannelAccountsOptions) error); ok {
		r0 = rf(ctx, chAccService, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureChannelAccountsCount provides a mock function with given fields: ctx, chAccService, count
func (_m *MockChAccCmdServiceInterface) EnsureChannelAccountsCount(ctx context.Context, chAccService services.ChannelAccountsService, count int) error {
	ret := _m.Called(ctx, chAccService, count)

	if len(ret) == 0 {
		panic("no return value specified for EnsureChannelAccountsCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, services.ChannelAccountsService, int) error); ok {
		r0 = rf(ctx, chAccService, count)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyChannelAccounts provides a mock function with given fields: ctx, chAccService, deleteInvalidAccounts
func (_m *MockChAccCmdServiceInterface) VerifyChannelAccounts(ctx context.Context, chAccService services.ChannelAccountsService, deleteInvalidAccounts bool) error {
	ret := _m.Called(ctx, chAccService, deleteInvalidAccounts)

	if len(ret) == 0 {
		panic("no return value specified for VerifyChannelAccounts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, services.ChannelAccountsService, bool) error); ok {
		r0 = rf(ctx, chAccService, deleteInvalidAccounts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ViewChannelAccounts provides a mock function with given fields: ctx, dbConnectionPool
func (_m *MockChAccCmdServiceInterface) ViewChannelAccounts(ctx context.Context, dbConnectionPool db.DBConnectionPool) error {
	ret := _m.Called(ctx, dbConnectionPool)

	if len(ret) == 0 {
		panic("no return value specified for ViewChannelAccounts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.DBConnectionPool) error); ok {
		r0 = rf(ctx, dbConnectionPool)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockChAccCmdServiceInterface creates a new instance of MockChAccCmdServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChAccCmdServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChAccCmdServiceInterface {
	mock := &MockChAccCmdServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
