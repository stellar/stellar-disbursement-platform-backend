# EXAMPLE values for the Stellar Disbursement Platform (SDP) Backend.
# Repo: https://github.com/stellar/stellar-disbursement-platform-backend
#
# This is a YAML-formatted file where you declare the variables to be passed into your templates.


## @section Global parameters
## These parameters are shared by all charts

## @param global.isPubnet Network to use: true for pubnet (mainnet), false for testnet
## @param global.replicaCount Global number of replicas to use. This is used only if autoscaling.enabled is set to false
global:
  isPubnet: false
  replicaCount: 1
  resources: { }
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 250m
    #   memory: 512Mi
    # requests:
    #   cpu: 50m
    #   memory: 256Mi
  service:
    type: ClusterIP

sdp:
  # =========================== START sdp.route ===========================
  route:
    schema: "https"
    # The domain is the public address of that service. For localhost you will want to include the port as part of the domain.
    # domain: "localhost:8000"
    domain: sdp.localhost.com
    port: "8000"
    metricsPort: "8002"
  # =========================== START sdp.image ===========================
  image:
    # replace the `repository` with the actual image name.
    repository: stellar/stellar-disbursement-platform-backend
    # for locally built images, use `pullPolicy: Never or IfNotPresent`.
    pullPolicy: IfNotPresent
    # If `tag` is set, it'll override the default value set in `.Chart.AppVersion`.
    tag: "latest"

  # =========================== START sdp.deployment ===========================
  deployment:
    annotations:

    podAnnotations:
      prometheus.io/path: /metrics
      prometheus.io/port: '{{ include "sdp.metricsPort" . }}'
      prometheus.io/scrape: "true"
    podSecurityContext: { }
    # fsGroup: 2000
    securityContext: { }
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
    strategy:
      # Ensure we upgrade 1 pod at a time to avoid migration races
      type: "RollingUpdate"
      rollingUpdate:
        maxUnavailable: 0
        maxSurge: 1

    nodeSelector: { }

    tolerations: [ ]

    affinity: { }

  # =========================== START sdp.configMap ===========================
  # ConfigMap is used to configure the SDP:
  configMap:
    # Annotations to add to the ConfigMap
    annotations:

    # The data to be stored in the ConfigMap
    data:
      # auth
      EC256_PUBLIC_KEY: "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEJ3HNphPAEKHvtRjsl5Kjwc9tTMqS\n2pmYNybrLsxZ6cuQvg2yiEoXZixP2cJ77csHClXC6cb1wQp/BNGDvGKoPg==\n-----END PUBLIC KEY-----"
      # general
      ENVIRONMENT: "localhost"
      LOG_LEVEL: "TRACE"
      # serve
      SEP10_SIGNING_PUBLIC_KEY: #required
      DISTRIBUTION_PUBLIC_KEY: #required
      # serve metrics
      METRICS_TYPE: "PROMETHEUS"
      # message senders
      EMAIL_SENDER_TYPE: DRY_RUN
      SMS_SENDER_TYPE: DRY_RUN
      # reCaptcha
      RECAPTCHA_SITE_KEY: #required
      # CORS Allowed Origins - "*" value for PR preview purpose
      CORS_ALLOWED_ORIGINS: "*"
      # enable recaptcha for login and forget password
      ENABLE_RECAPTCHA: "false"
      # enable email-based MFA during login
      ENABLE_MFA: "false"

  # =========================== START sdp.kubeSecrets ===========================
  kubeSecrets:
    secretName: "sdp-backend-secret-name"
    # Create
    create: false

    # Annotations to add to the secret
    annotations:

    # The data to be stored in the secret
    data:
      AWS_ACCESS_KEY_ID: MY_AWS_ACCESS_KEY_ID
      AWS_REGION: MY_AWS_REGION
      AWS_SECRET_ACCESS_KEY: MY_AWS_SECRET_ACCESS_KEY
      AWS_SES_SENDER_ID: MY_AWS_SES_SENDER_ID
      TWILIO_ACCOUNT_SID: MY_TWILIO_ACCOUNT_SID
      TWILIO_AUTH_TOKEN: MY_TWILIO_AUTH_TOKEN
      TWILIO_SERVICE_SID: MY_TWILIO_SERVICE_SID
      EC256_PRIVATE_KEY: "-----BEGIN PRIVATE KEY-----\nMIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgdo6o+tdFkF94B7z8\nnoybH6/zO3PryLLjLbj54/zOi4WhRANCAAQncc2mE8AQoe+1GOyXkqPBz21MypLa\nmZg3JusuzFnpy5C+DbKIShdmLE/ZwnvtywcKVcLpxvXBCn8E0YO8Yqg+\n-----END PRIVATE KEY-----"
      SEP10_SIGNING_PRIVATE_KEY: #required
      SEP24_JWT_SECRET: jwt_secret_1234567890
      RECAPTCHA_SITE_SECRET_KEY:  #required
      ANCHOR_PLATFORM_OUTGOING_JWT_SECRET: mySdpToAnchorPlatformSecret

  # =========================== START sdp.ingress ===========================
  ingress:
    enabled: true
    className: "nginx"
    annotations:

      # kubernetes.io/ingress.class: "public"
      nginx.ingress.kubernetes.io/custom-response-headers: "X-XSS-Protection: 1; mode=block || X-Frame-Options: DENY || X-Content-Type-Options: nosniff || Strict-Transport-Security: max-age=31536000; includeSubDomains"
    tls:
      - hosts:
          - '{{ include "sdp.domain" . }}'
        secretName: backend-tls-cert-name    # You need to create this secret manually. For more instructions, plz refer to helmchart/docs/README.md
        # NOTE: the hosts to be used here will be the same ones as in the sdp.route section.


# =========================== START anchorPlatform ===========================
anchorPlatform:

  # =========================== START anchorPlatform.route ===========================
  route:
    schema: "https"
    # The domain is the public address of that service. For localhost you will want to include the port as part of the domain.
    # domain: "localhost:8080"
    domain: "ap.localhost.com"
    sepPort: "8080"
    platformPort: "8085"
  # =========================== START anchorPlatform.deployment ===========================
  deployment:
    annotations:

    podAnnotations:
      prometheus.io/path: /metrics
      prometheus.io/port: '{{ include "sdp.ap.metricsPort" . }}'
      prometheus.io/scrape: "true"
    strategy:
      # Ensure we upgrade 1 pod at a time to avoid migration races
      type: "RollingUpdate"
      rollingUpdate:
        maxUnavailable: 0
        maxSurge: 1
    podSecurityContext:
      {}
    securityContext:
      {}
    resources:
      {}
    nodeSelector: { }

    tolerations: [ ]

    affinity: { }


  # =========================== START anchorPlatform.configMap ===========================
  configMap:
    # Annotations to add to the ConfigMap
    annotations:

    # The data to be stored in the ConfigMap
    data:
      APP_LOGGING_LEVEL: INFO
      # DATA_DATABASE:  # will be automatically populated in the development helm chart when we have `ephemeralDatabase` enabled.
      # DATA_SERVER:    # will be automatically populated in the development helm chart when we have `ephemeralDatabase` enabled.
      # DATA_FLYWAY_ENABLED: true  # TODO: test this later
      DATA_DDL_AUTO: update
      METRICS_ENABLED: "false"  # Metrics would be available at port 8082
      METRICS_EXTRAS_ENABLED: "false"
      ASSETS_VALUE: |   # TODO: update this later
        {
          "assets": [
            {
              "sep24_enabled": true,
              "schema": "stellar",
              "code": "USDC",
              "issuer": "GBBD47IF6LWK7P7MDEVSCWR7DPUWV3NY3DTQEVFL4NAT4AQH3ZLLFLA5",
              "distribution_account": "GDDSLDRLMIYZJOXPBWVTRU267TPXIJEYW6PSV7FMDBLFVZZI5AI4QV4F",
              "significant_decimals": 7,
              "deposit": {
                "enabled": true,
                "fee_minimum": 0,
                "fee_percent": 0,
                "min_amount": 1,
                "max_amount": 10000
              },
              "withdraw": {"enabled": false}
            },
            {
              "sep24_enabled": true,
              "schema": "stellar",
              "code": "native",
              "issuer": "",
              "distribution_account": "GDDSLDRLMIYZJOXPBWVTRU267TPXIJEYW6PSV7FMDBLFVZZI5AI4QV4F",
              "significant_decimals": 7,
              "deposit": {
                "enabled": true,
                "fee_minimum": 0,
                "fee_percent": 0,
                "min_amount": 1,
                "max_amount": 10000
              },
              "withdraw": {"enabled": false}
            }
          ]
        }
  
  # =========================== START anchorPlatform.kubeSecrets ===========================
  kubeSecrets:
    secretName: "anchor-platform-secret-name"
    # Create the secret for anchor platform
    create: false

    # Annotations to add to the secret
    annotations:

    # The data to be stored in the secret
    data:
      SECRET_DATA_PASSWORD: postgres                                                                                                                                                                                                                                                                                                                             │
      SECRET_DATA_USERNAME: postgres                                                                                                                                                                                                                                                                                                                                  │
      SECRET_PLATFORM_API_AUTH_SECRET: mySdpToAnchorPlatformSecret                                                                                                                                                                                                                                                                                                                   │
      SECRET_SEP10_JWT_SECRET: jwt_secret_1234567890                                                                                                                                                                                                                                                                                                                           │
      SECRET_SEP10_SIGNING_SEED: #required                                                                                                                                                                                                                                                                                      │
      SECRET_SEP24_INTERACTIVE_URL_JWT_SECRET: jwt_secret_1234567890                                                                                                                                                                                                                                                                                                           │
      SECRET_SEP24_MORE_INFO_URL_JWT_SECRET: jwt_secret_1234567890

  # =========================== START anchorPlatform.ingress ===========================
  ingress:
    enabled: true
    className: "nginx"
    annotations:

      # kubernetes.io/ingress.class: "public"
      nginx.ingress.kubernetes.io/custom-response-headers: "X-XSS-Protection: 1; mode=block || X-Frame-Options: DENY || X-Content-Type-Options: nosniff || Strict-Transport-Security: max-age=31536000; includeSubDomains"
    tls:
      - hosts:
          - '{{ include "sdp.ap.domain" . }}'
        secretName: backend-tls-cert-name    # You need to create this secret manually. For more instructions, plz refer to helmchart/docs/README.md
        # NOTE: the hosts to be used here will be the same ones as in the anchorPlatform.route section.


# =========================== START tss ===========================
tss:
  # =========================== START tss.route ===========================
  route:
    schema: "https"
    port: "9000"
    metricsPort: "9002"
  # =========================== START tss.deployment ===========================
  deployment:
    # Annotations to add to the Deployment
    annotations:

    podAnnotations:
      prometheus.io/path: /metrics
      prometheus.io/port: '{{ include "tss.metricsPort" . }}'
      prometheus.io/scrape: "true"

    strategy:
      # Ensure we upgrade 1 pod at a time to avoid migration races
      type: "RollingUpdate"
      rollingUpdate:
        maxUnavailable: 0
        maxSurge: 1
    podSecurityContext:
      { }
    securityContext:
      { }
    resources:
      { }
    nodeSelector: { }

    tolerations: [ ]

    affinity: { }
  # =========================== START tss.configMap ===========================
  configMap:
    # Annotations to add to the ConfigMap
    annotations:

    data:
      NUM_CHANNEL_ACCOUNTS: "1"
      MAX_BASE_FEE: "100"
      MOCK: "false"
      TSS_METRICS_TYPE: "TSS_PROMETHEUS"

  # =========================== START tss.kubeSecrets ===========================
  kubeSecrets:
    secretName: "tss-secret-name"
    # Create the secret for tss
    create: false

    # Annotations to add to the secret
    annotations:

    # The data to be stored in the secret
    data:
      DISTRIBUTION_SEED: #required

# =========================== FRONTEND DASHBOARD ===========================
dashboard:
  enabled: false
  route:
    schema: "https"
    domain: "sdp-dashboard.localhost.com"
    port: "80"
  image:
    fullName: stellar/stellar-disbursement-platform-frontend:latest
    pullPolicy: IfNotPresent
  deployment:
    annotations:
      {}
    podAnnotations:
      {}
    strategy:
      type: "RollingUpdate"
      rollingUpdate:
        maxUnavailable: 0
        maxSurge: 1
    podSecurityContext:
      {}
    securityContext:
      {}
    resources:
      {}
  configMap:
    annotations:
      {}
    data:   # The data to be stored in the ConfigMap:
      API_URL: "{{ include \"sdp.schema\" . }}://{{ include \"sdp.domain\" . }}"
      RECAPTCHA_SITE_KEY: "reCaptchaSiteKey"
  ingress:
    enabled: false
    className: "nginx"
    annotations:
      {}
    tls:
    - hosts:
      - '{{ include "dashboard.domain" . }}'
      secretName: dashboard-tls-cert-name    # You need to create this secret manually. For more instructions, plz refer to helmchart/docs/README.md


# =========================== START Postgres (TESTING database) ===========================

# `ephemeralDatabase` will create an ephemeral database for testing purposes.
# If this option is enabled, make sure to set the `DATABASE_URL` environment variable to:
# postgres://postgres:postgres@{{ include "sdp.fullname" . }}-psql:5432/postgres-sdp?sslmode=disable
# The AP database URL will be set automatically to:
# postgres://postgres:postgres@{{ include "sdp.fullname" . }}-psql:5433/postgres-ap?sslmode=disable
ephemeralDatabase: true


# =========================== START serviceAccount ===========================

# Not used in SDF's deployment:
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations:

  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""


# =========================== START Autoscaling ===========================

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 4
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80