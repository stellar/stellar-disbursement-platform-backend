# EXAMPLE values for the Stellar Disbursement Platform (SDP) Backend.
# Repo: https://github.com/stellar/stellar-disbursement-platform-backend
#
# This is a YAML-formatted file where you declare the variables to be passed into your templates.




# =========================== START global ===========================
## @section Global parameters
## @descriptionStart
##  These parameters are shared by all charts.
## @descriptionEnd
global:
  ## @param global.isPubnet Determines if the network is public. Set this to true for public networks.
  isPubnet: false

  ## @param global.replicaCount Number of replicas for the application.
  replicaCount: 1

  ## @param global.resources Resource limits and requests for the application pods.
  ## By default, we recommend not specifying default resources to ensure the chart can run on environments with minimal resources, such as Minikube.
  ## If you wish to specify resources, uncomment the resource fields and adjust them as necessary.
  resources: { }
  # limits:
  #   cpu: 250m
  #   memory: 512Mi
  # requests:
  #   cpu: 50m
  #   memory: 256Mi

  ## @param global.service.type Kubernetes Service type for the application.
  service:
    type: ClusterIP


  ## @extra global.autoscaling Configuration related to the horizontal pod autoscaling of the application.
  ## @param global.autoscaling.enabled Determines if autoscaling is enabled for the application.
  ## @param global.autoscaling.minReplicas Minimum number of replicas when autoscaling is enabled.
  ## @param global.autoscaling.maxReplicas Maximum number of replicas when autoscaling is enabled.
  ## @param global.autoscaling.targetCPUUtilizationPercentage Target CPU utilization percentage for autoscaling.
  ## @param global.autoscaling.targetMemoryUtilizationPercentage Target memory utilization percentage for autoscaling.
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 4
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  ## @extra global.serviceAccount Configuration related to the Kubernetes Service Account used by the application.
  ## @param global.serviceAccount.create Determines if a new service account should be created.
  ## @param global.serviceAccount.annotations Annotations to be added to the service account.
  ## @param global.serviceAccount.name Name of the service account to be used. If not set and create is set to true, a name will be generated using the fullname template.
  serviceAccount:
    create: false
    annotations:
    name: ""

  ## @param global.ephemeralDatabase Enables or disables the creation of an ephemeral database for testing purposes.
  ## If this option is enabled, make sure to set the `DATABASE_URL` environment variable to:
  ##   - postgres://postgres:postgres@{{ include "sdp.fullname" . }}-psql:5432/postgres-sdp?sslmode=disable
  ## The AP database URL will be set automatically to:
  ##   - postgres://postgres:postgres@{{ include "sdp.fullname" . }}-psql:5433/postgres-ap?sslmode=disable
  ephemeralDatabase: true

# =========================== START sdp ===========================
## @section Stellar Disbursement Platform (SDP) parameters
## @descriptionStart
## Configuration parameters for the SDP Core Service which is the core backend service that performs several functions:
## - Dashboard API: the API used by the front-end UI for all disbursement requests.
## - Messaging Service: a recurring process that sends text messages to users prompting them to download the wallet selected for a particular disbursement and verify their phone with an OTP
## - Wallet Registration UI: a web application that collects and verifies the recipient’s OTP code and verification information via Stellar’s SEP-24: Hosted Deposit and Withdrawal protocol
## @descriptionEnd
sdp:
  ## @extra sdp.route Configuration related to the routing of the SDP service.
  ## @param sdp.route.schema Protocol scheme used for the service. Can be "http" or "https".
  ## @param sdp.route.domain Public domain/address of the SDP service. If using localhost, consider including the port as part of the domain.
  ## @param sdp.route.port Primary port on which the SDP service listens.
  ## @param sdp.route.metricsPort Port dedicated to metrics collection for the SDP service.
  route:
    schema: "https"
    domain: sdp.localhost.com
    port: "8000"
    metricsPort: "8002"

  ## @extra sdp.image Configuration related to the Docker image used by the SDP service.
  ## @param sdp.image.repository Docker image repository for the SDP backend service.
  ## @param sdp.image.pullPolicy Image pull policy for the SDP service. For locally built images, consider using "Never" or "IfNotPresent".
  ## @param sdp.image.tag Docker image tag for the SDP service. If set, this overrides the default value from `.Chart.AppVersion`.
  image:
    repository: stellar/stellar-disbursement-platform-backend
    pullPolicy: Always
    tag: "latest"

  ## @extra sdp.deployment Configuration related to the deployment of the SDP service.
  ## @param sdp.deployment.annotations Annotations to be added to the deployment.
  ## @param sdp.deployment.podAnnotations Annotations specific to the pods.
  ## @param sdp.deployment.podSecurityContext Security settings for the pods.
  ## @param sdp.deployment.securityContext Security settings for the container within the pod.
  ## @param sdp.deployment.strategy Configuration related to the deployment strategy, ensuring smooth updates and minimal downtime.
  ## @param sdp.deployment.nodeSelector Node selector to determine which nodes should run the pods.
  ## @param sdp.deployment.tolerations Tolerations to ensure pods aren't scheduled on unsuitable nodes.
  ## @param sdp.deployment.affinity Affinity rules to determine where pods get scheduled based on node conditions.
  deployment:
    annotations:
    podAnnotations: {}
    podSecurityContext: {}
    securityContext: {}
    strategy: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}

  ## @extra sdp.configMap Configuration for the ConfigMap used by the SDP service.
  ## @param sdp.configMap.annotations Annotations to be added to the ConfigMap.
  ## @extra sdp.configMap.data Used to inject non-sensitive environment variables into the SDP deployment; for the latest variables, consult the application's CLI `-h` command.
  ## @param sdp.configMap.data.BASE_URL The base URL of the SDP backend.
  ## @param sdp.configMap.data.CRASH_TRACKER_TYPE Determines the type of crash tracker in use. Options: "DRY_RUN", "SENTRY".
  ## @param sdp.configMap.data.EC256_PUBLIC_KEY [string] The EC256 public key used for authentication purposes. This EC key needs to be at least as strong as prime256v1 (P-256).
  ## @param sdp.configMap.data.ENVIRONMENT Specifies the environment SDP is running in (e.g. "localhost").
  ## @param sdp.configMap.data.LOG_LEVEL Determines the verbosity level of logs. Options: "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "FATAL", "PANIC"
  ## @param sdp.configMap.data.SEP10_SIGNING_PUBLIC_KEY Anchor platform SEP10 signing public key.
  ## @param sdp.configMap.data.DISTRIBUTION_PUBLIC_KEY The public key of the Stellar distribution account that sends the Stellar payments.
  ## @param sdp.configMap.data.METRICS_TYPE Defines the type of metrics system in use. Options: "PROMETHEUS".
  ## @param sdp.configMap.data.EMAIL_SENDER_TYPE The messenger type used to send invitations to new dashboard users. Options: "DRY_RUN", "AWS_EMAIL".
  ## @param sdp.configMap.data.SMS_SENDER_TYPE The messenger type used to send text messages to recipients. Options: "DRY_RUN", "TWILIO_SMS".
  ## @param sdp.configMap.data.RECAPTCHA_SITE_KEY Site key for ReCaptcha. Required if using ReCaptcha.
  ## @param sdp.configMap.data.CORS_ALLOWED_ORIGINS Specifies the domains allowed to make cross-origin requests. "*" means all domains are allowed.
  ## @param sdp.configMap.data.ENABLE_RECAPTCHA Determines if ReCaptcha should be enabled for login ("true" or "false").
  ## @param sdp.configMap.data.ENABLE_MFA Determines if email-based MFA should be enabled during login ("true" or "false").
  ## @param sdp.configMap.data.SDP_UI_BASE_URL The base URL of the SDP UI/dashboard.
  configMap:
    annotations:
    data:
      BASE_URL: "http://localhost:8000"
      CRASH_TRACKER_TYPE: "DRY_RUN"
      EC256_PUBLIC_KEY: #required
      ENVIRONMENT: "localhost"
      LOG_LEVEL: "INFO"
      SEP10_SIGNING_PUBLIC_KEY: #required
      DISTRIBUTION_PUBLIC_KEY: #required
      METRICS_TYPE: "PROMETHEUS"
      EMAIL_SENDER_TYPE: DRY_RUN
      SMS_SENDER_TYPE: DRY_RUN
      RECAPTCHA_SITE_KEY: #required
      CORS_ALLOWED_ORIGINS: "*"
      ENABLE_RECAPTCHA: "false"
      ENABLE_MFA: "false"
      SDP_UI_BASE_URL: #required

  ## @extra sdp.kubeSecrets Kubernetes secrets are used to manage sensitive information, such as API keys and private keys. It's crucial that these details are kept private.
  ## @param sdp.kubeSecrets.secretName The name of the Kubernetes secret object. Only use this if create is false.
  ## @param sdp.kubeSecrets.create If true, the secret will be created. If false, it is assumed the secret already exists.
  ## @param sdp.kubeSecrets.annotations Annotations to be added to the secret.
  ## @param sdp.kubeSecrets.data.AWS_ACCESS_KEY_ID AWS IAM user's access key ID for authenticating to AWS services.
  ## @param sdp.kubeSecrets.data.AWS_REGION AWS region where services (like SES for email sending) are provisioned.
  ## @param sdp.kubeSecrets.data.AWS_SECRET_ACCESS_KEY AWS IAM user's secret access key for authenticating to AWS services.
  ## @param sdp.kubeSecrets.data.AWS_SES_SENDER_ID Identifier for the AWS SES service used for sending emails.
  ## @param sdp.kubeSecrets.data.AWS_SNS_SENDER_ID Identifier for the AWS SNS service used for sending text messages.
  ## @param sdp.kubeSecrets.data.TWILIO_ACCOUNT_SID Account SID for authenticating to the Twilio service, used for sending text messages.
  ## @param sdp.kubeSecrets.data.TWILIO_AUTH_TOKEN Authentication token for the Twilio service.
  ## @param sdp.kubeSecrets.data.TWILIO_SERVICE_SID Service SID for the specific Twilio service being utilized.
  ## @param sdp.kubeSecrets.data.EC256_PRIVATE_KEY [string] The EC256 Private Key. This key is used to sign the authentication token. This EC key needs to be at least as strong as prime256v1 (P-256).
  ## @param sdp.kubeSecrets.data.SEP10_SIGNING_PRIVATE_KEY The public key of the Stellar account that signs the SEP-10 transactions. It's also used to sign URLs.
  ## @param sdp.kubeSecrets.data.SEP24_JWT_SECRET The JWT secret that's used by the Anchor Platform to sign the SEP-24 JWT token. Must be the same as Anchor Platform's SECRET_SEP24_INTERACTIVE_URL_JWT_SECRET.
  ## @param sdp.kubeSecrets.data.RECAPTCHA_SITE_SECRET_KEY Secret key for Google reCAPTCHA service to verify user's non-robotic behavior.
  ## @param sdp.kubeSecrets.data.ANCHOR_PLATFORM_OUTGOING_JWT_SECRET The JWT secret used to create a JWT token used to send requests to the anchor platform.
  ## @param sdp.kubeSecrets.data.DATABASE_URL URL of the database used by the SDP.
  ## @param sdp.kubeSecrets.data.DISTRIBUTION_SEED The private key of the Stellar account used to disburse funds. This is needed for the init container
  ## @param sdp.kubeSecrets.data.SENTRY_DSN The DSN for the Sentry service. it must be set if CRASH_TRACKER_TYPE is set to "SENTRY".
  kubeSecrets:
    secretName: "sdp-backend-secret-name"
    create: false
    annotations:
    data:
      AWS_ACCESS_KEY_ID: MY_AWS_ACCESS_KEY_ID
      AWS_REGION: MY_AWS_REGION
      AWS_SECRET_ACCESS_KEY: MY_AWS_SECRET_ACCESS_KEY
      AWS_SES_SENDER_ID: MY_AWS_SES_SENDER_ID
      AWS_SNS_SENDER_ID: MY_AWS_SNS_SENDER_ID
      TWILIO_ACCOUNT_SID: MY_TWILIO_ACCOUNT_SID
      TWILIO_AUTH_TOKEN: MY_TWILIO_AUTH_TOKEN
      TWILIO_SERVICE_SID: MY_TWILIO_SERVICE_SID
      SENTRY_DSN: #optional
      EC256_PRIVATE_KEY: #required
      SEP10_SIGNING_PRIVATE_KEY: #required
      SEP24_JWT_SECRET: #required
      RECAPTCHA_SITE_SECRET_KEY:  #required
      ANCHOR_PLATFORM_OUTGOING_JWT_SECRET: #required for mySdpToAnchorPlatformSecret
      DATABASE_URL: #required
      DISTRIBUTION_SEED: #required


  ## @extra sdp.ingress Configuration for the ingress controller for the SDP service.
  ## @param sdp.ingress.enabled If true, an ingress controller will be created for the SDP service.
  ## @param sdp.ingress.className Name of the IngressClass to be used for the ingress controller.
  ## @skip sdp.ingress.annotations
  ## @param sdp.ingress.tls[0].hosts List of hosts covered by the TLS certificate.
  ## @param sdp.ingress.tls[0].secretName The name of the Kubernetes TLS secret. You need to create this secret manually.
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/custom-response-headers: "X-XSS-Protection: 1; mode=block || X-Frame-Options: DENY || X-Content-Type-Options: nosniff || Strict-Transport-Security: max-age=31536000; includeSubDomains"
    tls:
      - hosts:
          - '{{ include "sdp.domain" . }}'
        secretName: backend-tls-cert-name    # You need to create this secret manually. For more instructions, please refer to helmchart/docs/README.md
        # NOTE: the hosts to be used here will be the same ones as in the sdp.route section.

# =========================== START anchorPlatform ===========================
## @section Anchor Platform
## @descriptionStart
## Configuration parameters for the Anchor Platform which is the API server that the wallet uses to authenticate and initiate
##  the recipient’s registration process through the SEP-24 deposit flow.
## @descriptionEnd
anchorPlatform:

  ## @extra anchorPlatform.route Configuration related to the routing of the Anchor Platform service.
  ## @param anchorPlatform.route.schema Protocol scheme used for the service. Can be "http" or "https".
  ## @param anchorPlatform.route.domain Public domain/address of the Anchor Platform service. If using localhost, consider including the port as part of the domain.
  ## @param anchorPlatform.route.sepPort The port of the sep server of the anchor platform. This is the public API that is meant to be reached by a client application, such as the stellar.toml file."
  ## @param anchorPlatform.route.platformPort The port of the platform server of the anchor platform. This is the private API that is meant to be reached only by the SDP server, such as the PATCH /sep24/transactions endpoint.",
  route:
    schema: "https"
    domain: "ap.localhost.com"
    sepPort: "8080"
    platformPort: "8085"


  ## @extra anchorPlatform.deployment Configuration related to the deployment of the Anchor Platform.
  ## @param anchorPlatform.deployment.annotations Annotations to be added to the deployment.
  ## @param anchorPlatform.deployment.podAnnotations Annotations specific to the pods.
  ## @param anchorPlatform.deployment.strategy Configuration related to the deployment strategy, ensuring smooth updates and minimal downtime.
  ## @param anchorPlatform.deployment.podSecurityContext Security settings for the pods.
  ## @param anchorPlatform.deployment.securityContext Security settings for the container within the pod.
  ## @param anchorPlatform.deployment.resources Resource limits and requests for the application pods.
  ## @param anchorPlatform.deployment.nodeSelector Node selector to determine which nodes should run the pods.
  ## @param anchorPlatform.deployment.tolerations Tolerations to ensure pods aren't scheduled on unsuitable nodes.
  ## @param anchorPlatform.deployment.affinity Affinity rules to determine where pods get scheduled based on node conditions.
  deployment:
    annotations: {}
    podAnnotations: {}
    strategy: {}
    podSecurityContext: {}
    securityContext: {}
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}


  ## @extra anchorPlatform.configMap Configuration for the ConfigMap used by the anchorPlatform service.
  ## @param anchorPlatform.configMap.annotations Annotations to be added to the ConfigMap.
  ## @extra anchorPlatform.configMap.data Used to inject non-sensitive environment variables into the Anchor Platform deployment; for the latest variables, consult Anchor Platform's public documentation.
  ## @param anchorPlatform.configMap.data.APP_LOGGING_LEVEL Specifies the logging level for the application (e.g. "INFO", "DEBUG", "ERROR").
  ## @extra anchorPlatform.configMap.data.DATA_DATABASE Specifies the database connection details for the platform. Will be auto-populated in the development helm chart when `ephemeralDatabase` is enabled.
  ## @extra anchorPlatform.configMap.data.DATA_SERVER Specifies the server connection details for the platform. Will be auto-populated in the development helm chart when `ephemeralDatabase` is enabled.
  ## @extra anchorPlatform.configMap.data.DATA_FLYWAY_ENABLED Determines if Flyway, the database migration tool, is enabled.
  ## @param anchorPlatform.configMap.data.DATA_DDL_AUTO Specifies the strategy Hibernate should use for the database schema initialization. The standard Hibernate property values are `none`, `validate`, `update`, `create-drop`.
  ## @param anchorPlatform.configMap.data.METRICS_ENABLED Determines if metrics collection is enabled for the platform. If enabled, metrics would be available at port 8082.
  ## @param anchorPlatform.configMap.data.METRICS_EXTRAS_ENABLED Determines if additional metrics (beyond the standard set) are enabled for collection.
  ## @param anchorPlatform.configMap.data.ASSETS_VALUE [string] Specifies the details and configuration of assets supported by the anchor platform. This includes SEP-24 enabled assets, schema type, code, issuer details, distribution account, precision details, and deposit and withdrawal configurations. Currently, it needs to be *manually* kept up to date with the SDP state.
  ## @param anchorPlatform.configMap.data.SEP10_CLIENT_ATTRIBUTION_REQUIRED When set to `true`, only SEP-10 requests from known clients listed in `SEP10_CLIENT_ATTRIBUTION_ALLOW_LIST` will be accepted.
  ## @param anchorPlatform.configMap.data.SEP10_CLIENT_ATTRIBUTION_ALLOW_LIST The comma-separated list of client domains allowed to make SEP-10 requests.
  configMap:
    annotations:
    data:
      APP_LOGGING_LEVEL: INFO
      DATA_DDL_AUTO: update
      METRICS_ENABLED: "false"  # Metrics would be available at port 8082
      METRICS_EXTRAS_ENABLED: "false"
      SEP10_CLIENT_ATTRIBUTION_REQUIRED: "false"  # RECOMMENDED value is `true`
      SEP10_CLIENT_ATTRIBUTION_ALLOW_LIST: ""     # RECOMMENDED value is a comma-separated list of client domains allowed to make SEP-10 requests.
      ASSETS_VALUE: |   # TODO: keep this up to date with the latest assets supported by the SDP
        {
          "assets": [
            {
              "sep24_enabled": true,
              "schema": "stellar",
              "code": "USDC",
              "issuer": "GBBD47IF6LWK7P7MDEVSCWR7DPUWV3NY3DTQEVFL4NAT4AQH3ZLLFLA5",
              "distribution_account": "GDDSLDRLMIYZJOXPBWVTRU267TPXIJEYW6PSV7FMDBLFVZZI5AI4QV4F",
              "significant_decimals": 7,
              "deposit": {
                "enabled": true,
                "fee_minimum": 0,
                "fee_percent": 0,
                "min_amount": 1,
                "max_amount": 10000
              },
              "withdraw": {"enabled": false}
            },
            {
              "sep24_enabled": true,
              "schema": "stellar",
              "code": "native",
              "issuer": "",
              "distribution_account": "GDDSLDRLMIYZJOXPBWVTRU267TPXIJEYW6PSV7FMDBLFVZZI5AI4QV4F",
              "significant_decimals": 7,
              "deposit": {
                "enabled": true,
                "fee_minimum": 0,
                "fee_percent": 0,
                "min_amount": 1,
                "max_amount": 10000
              },
              "withdraw": {"enabled": false}
            }
          ]
        }

  ## @extra anchorPlatform.kubeSecrets secrets are used to manage sensitive information, such as API keys and private keys. It's crucial that these details are kept private.
  ## @param anchorPlatform.kubeSecrets.secretName The name of the Kubernetes secret object. Only use this if create is false.
  ## @param anchorPlatform.kubeSecrets.create If true, the secret will be created. If false, it is assumed the secret already exists.
  ## @param anchorPlatform.kubeSecrets.annotations Annotations to be added to the secret.
  ## @param anchorPlatform.kubeSecrets.data.SECRET_DATA_PASSWORD Database password for the anchor platform.
  ## @param anchorPlatform.kubeSecrets.data.SECRET_DATA_USERNAME Database username for the anchor platform.
  ## @param anchorPlatform.kubeSecrets.data.SECRET_PLATFORM_API_AUTH_SECRET The secret used for authenticating API requests between the SDP and the Anchor Platform.
  ## @param anchorPlatform.kubeSecrets.data.SECRET_SEP10_JWT_SECRET The JWT secret used by the Anchor Platform to sign SEP-10 JWT tokens. These tokens are used for various authentication and transaction-related purposes.
  ## @param anchorPlatform.kubeSecrets.data.SECRET_SEP10_SIGNING_SEED The seed for the SEP-10 signing process. It's essential for ensuring the security and authenticity of SEP-10 transactions.
  ## @param anchorPlatform.kubeSecrets.data.SECRET_SEP24_INTERACTIVE_URL_JWT_SECRET The JWT secret used by the Anchor Platform to sign SEP-24 interactive URLs. These URLs typically initiate user-interactive processes like deposits and withdrawals. Must be the same as SDP's SEP24_JWT_SECRET.
  ## @param anchorPlatform.kubeSecrets.data.SECRET_SEP24_MORE_INFO_URL_JWT_SECRET The JWT secret used by the Anchor Platform to sign SEP-24 'More Info' URLs. These URLs provide users with additional details or steps related to their transactions.
  kubeSecrets:
    secretName: "anchor-platform-secret-name"
    create: false
    annotations:
    data:
      SECRET_DATA_PASSWORD: #required
      SECRET_DATA_USERNAME: #required
      SECRET_PLATFORM_API_AUTH_SECRET: #required for mySdpToAnchorPlatformSecret
      SECRET_SEP10_JWT_SECRET: #required
      SECRET_SEP10_SIGNING_SEED: #required
      SECRET_SEP24_INTERACTIVE_URL_JWT_SECRET: #required
      SECRET_SEP24_MORE_INFO_URL_JWT_SECRET: #required

  ## @extra anchorPlatform.ingress Configuration for the ingress controller for the Anchor Platform.
  ## @param anchorPlatform.ingress.enabled If true, an ingress controller will be created for the Anchor Platform.
  ## @param anchorPlatform.ingress.className Name of the IngressClass to be used for the ingress controller.
  ## @skip anchorPlatform.ingress.annotations
  ## @param anchorPlatform.ingress.tls[0].hosts List of hosts covered by the TLS certificate.
  ## @param anchorPlatform.ingress.tls[0].secretName The name of the Kubernetes TLS secret. You need to create this secret manually. For more instructions, please refer to helmchart/docs/README.md
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/custom-response-headers: "X-XSS-Protection: 1; mode=block || X-Frame-Options: DENY || X-Content-Type-Options: nosniff || Strict-Transport-Security: max-age=31536000; includeSubDomains"
    tls:
      - hosts:
          - '{{ include "sdp.ap.domain" . }}'
        secretName: backend-tls-cert-name
        # NOTE: the hosts to be used here will be the same ones as in the anchorPlatform.route section.


# =========================== START tss ===========================
## @section Transaction Submission Service
## @descriptionStart
## Configuration parameters for the Transaction Submission Service. This is the service that submits all payment transactions to the Stellar network.
##  This service is designed to maximize payment throughput, handle queuing, and graceful resubmission/error handling
## @descriptionEnd
tss:
  ## @extra tss.route Configuration related to the routing of the TSS.
  ## @param tss.route.schema Protocol scheme used for the service. Can be "http" or "https".
  ## @param tss.route.port Primary port on which the TSS listens.
  ## @param tss.route.metricsPort Port dedicated to metrics collection for the TSS.
  route:
    schema: "https"
    port: "9000"
    metricsPort: "9002"


  ## @extra tss.deployment Configuration related to the deployment of the TSS.
  ## @param tss.deployment.annotations Annotations to be added to the deployment.
  ## @param tss.deployment.podAnnotations Annotations specific to the pods.
  ## @param tss.deployment.strategy Configuration related to the deployment strategy, ensuring smooth updates and minimal downtime.
  ## @param tss.deployment.podSecurityContext Security settings for the pods.
  ## @param tss.deployment.securityContext Security settings for the container within the pod.
  ## @param tss.deployment.resources Resource limits and requests for the application pods.
  ## @param tss.deployment.nodeSelector Node selector to determine which nodes should run the pods.
  ## @param tss.deployment.tolerations Tolerations to ensure pods aren't scheduled on unsuitable nodes.
  ## @param tss.deployment.affinity Affinity rules to determine where pods get scheduled based on node conditions.
  deployment:
    annotations:
    podAnnotations: { }
    strategy: { }
    podSecurityContext: { }
    securityContext: { }
    resources: { }
    nodeSelector: { }
    tolerations: [ ]
    affinity: { }

  ## @extra tss.configMap Configuration settings for the Transaction Submission Service (TSS) ConfigMap.
  ## @param tss.configMap.annotations Annotations to be added to the ConfigMap.
  ## @extra tss.configMap.data Used to inject non-sensitive environment variables into the TSS deployment; for the latest variables, consult the application's CLI `-h` command.
  ## @param tss.configMap.data.CRASH_TRACKER_TYPE Determines the type of crash tracker in use. Options: "DRY_RUN", "SENTRY".
  ## @param tss.configMap.data.NUM_CHANNEL_ACCOUNTS The number of channel accounts the TSS will create/use. Channel accounts provide a method for submitting transactions to the network at a high rate.
  ## @param tss.configMap.data.MAX_BASE_FEE Specifies the maximum base fee (in stroops) the TSS is willing to pay per transaction. This helps to control costs and ensures transactions are economically feasible.
  ## @param tss.configMap.data.TSS_METRICS_TYPE Defines the type of metrics system that the TSS should use. Options: "TSS_PROMETHEUS".
  ## @param tss.configMap.data.QUEUE_POLLING_INTERVAL Specifies the interval (in seconds) at which the TSS should poll the queue.
  ## @param tss.configMap.data.ENVIRONMENT Specifies the environment TSS is running in (e.g. "localhost").
  ## @param tss.configMap.data.LOG_LEVEL Determines the verbosity level of logs. Options: "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "FATAL", "PANIC"
  configMap:
    annotations:
    data:
      CRASH_TRACKER_TYPE: "DRY_RUN"
      NUM_CHANNEL_ACCOUNTS: "1"
      MAX_BASE_FEE: "100000"
      TSS_METRICS_TYPE: "TSS_PROMETHEUS"
      QUEUE_POLLING_INTERVAL: "6"
      ENVIRONMENT: "development"
      LOG_LEVEL: "INFO"

  ## @extra tss.kubeSecrets Kubernetes secrets are used to manage sensitive information, such as API keys and private keys. It's crucial that these details are kept private.
  ## @param tss.kubeSecrets.secretName The name of the Kubernetes secret object. Only use this if create is false.
  ## @param tss.kubeSecrets.create If true, the secret will be created. If false, it is assumed the secret already exists.
  ## @param tss.kubeSecrets.annotations Annotations to be added to the secret.
  ## @param tss.kubeSecrets.data.DATABASE_URL URL of the database used by the TSS.
  ## @param tss.kubeSecrets.data.DISTRIBUTION_SEED The private key of the Stellar account used to disburse funds.
  ## @param tss.kubeSecrets.data.SENTRY_DSN The DSN for the Sentry service. it must be set if CRASH_TRACKER_TYPE is set to "SENTRY".
  kubeSecrets:
    secretName: "tss-secret-name"
    create: false
    annotations:
    data:
      DATABASE_URL: #required
      DISTRIBUTION_SEED: #required
      SENTRY_DSN: #optional
      


# =========================== START dashboard ===========================
## @section Dashboard
## @descriptionStart
## Configuration parameters for the Dashboard. This is the user interface administrators use to initiate and track the progress of disbursements.
## @descriptionEnd
dashboard:

  ## @param dashboard.enabled If true, the dashboard will be deployed.
  enabled: false

  ## @extra dashboard.route Configuration related to the routing of the Dashboard.
  ## @param dashboard.route.schema Protocol scheme used for the service. Can be "http" or "https".
  ## @param dashboard.route.domain Public domain/address of the Dashboard.
  ## @param dashboard.route.port Primary port on which the Dashboard listens.
  route:
    schema: "https"
    domain: "sdp-dashboard.localhost.com"
    port: "80"

  ## @extra dashboard.image Configuration related to the Docker image used by the Dashboard.
  ## @param dashboard.image.fullName Full name of the Docker image.
  ## @param dashboard.image.pullPolicy Image pull policy for the dashboard. For locally built images, consider using "Never" or "IfNotPresent".
  image:
    fullName: stellar/stellar-disbursement-platform-frontend:latest
    pullPolicy: Always

  ## @extra dashboard.deployment Configuration related to the deployment of the Dashboard.
  ## @param dashboard.deployment.annotations Annotations to be added to the deployment.
  ## @param dashboard.deployment.podAnnotations Annotations specific to the pods.
  ## @param dashboard.deployment.strategy Configuration related to the deployment strategy, ensuring smooth updates and minimal downtime.
  ## @param dashboard.deployment.podSecurityContext Security settings for the pods.
  ## @param dashboard.deployment.securityContext Security settings for the container within the pod.
  ## @param dashboard.deployment.resources Resource limits and requests for the application pods.
  deployment:
    annotations: {}
    podAnnotations: {}
    strategy: {}
    podSecurityContext: {}
    securityContext: {}
    resources: {}

  ## @extra dashboard.configMap Configuration settings for the Dashboard ConfigMap.
  ## @param dashboard.configMap.annotations Annotations to be added to the ConfigMap.
  ## @extra dashboard.configMap.data Used to inject non-sensitive environment variables into the Dashboard deployment.
  ## @param dashboard.configMap.data.API_URL The URL for the API the dashboard should interact with.
  ## @param dashboard.configMap.data.RECAPTCHA_SITE_KEY The site key for Google reCAPTCHA service.
  configMap:
    annotations: {}
    data:   # The data to be stored in the ConfigMap:
      API_URL: "{{ include \"sdp.schema\" . }}://{{ include \"sdp.domain\" . }}"
      RECAPTCHA_SITE_KEY: "reCaptchaSiteKey"

  ## @extra dashboard.ingress Configuration for the ingress controller for the dashboard.
  ## @param dashboard.ingress.enabled If true, an ingress controller will be created for the dashboard.
  ## @param dashboard.ingress.className Name of the IngressClass to be used for the ingress controller.
  ## @skip dashboard.ingress.annotations
  ## @param dashboard.ingress.tls[0].hosts List of hosts covered by the TLS certificate.
  ## @param dashboard.ingress.tls[0].secretName The name of the Kubernetes TLS secret. You need to create this secret manually.
  ingress:
    enabled: false
    className: "nginx"
    annotations: {}
    tls:
    - hosts:
      - '{{ include "dashboard.domain" . }}'
      secretName: dashboard-tls-cert-name    # You need to create this secret manually. For more instructions, please refer to helmchart/docs/README.md



