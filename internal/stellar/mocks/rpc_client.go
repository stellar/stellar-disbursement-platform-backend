// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	protocol "github.com/stellar/stellar-rpc/protocol"
	mock "github.com/stretchr/testify/mock"

	stellar "github.com/stellar/stellar-disbursement-platform-backend/internal/stellar"
)

// MockRPCClient is an autogenerated mock type for the RPCClient type
type MockRPCClient struct {
	mock.Mock
}

// SimulateTransaction provides a mock function with given fields: ctx, request
func (_m *MockRPCClient) SimulateTransaction(ctx context.Context, request protocol.SimulateTransactionRequest) (*stellar.SimulationResult, *stellar.SimulationError) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SimulateTransaction")
	}

	var r0 *stellar.SimulationResult
	var r1 *stellar.SimulationError
	if rf, ok := ret.Get(0).(func(context.Context, protocol.SimulateTransactionRequest) (*stellar.SimulationResult, *stellar.SimulationError)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, protocol.SimulateTransactionRequest) *stellar.SimulationResult); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stellar.SimulationResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, protocol.SimulateTransactionRequest) *stellar.SimulationError); ok {
		r1 = rf(ctx, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*stellar.SimulationError)
		}
	}

	return r0, r1
}

// NewMockRPCClient creates a new instance of MockRPCClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRPCClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRPCClient {
	mock := &MockRPCClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
