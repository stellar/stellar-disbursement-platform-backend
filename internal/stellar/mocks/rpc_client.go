// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	protocol "github.com/stellar/stellar-rpc/protocol"
	mock "github.com/stretchr/testify/mock"
)

// MockRPCClient is an autogenerated mock type for the RPCClient type
type MockRPCClient struct {
	mock.Mock
}

// SimulateTransaction provides a mock function with given fields: ctx, request
func (_m *MockRPCClient) SimulateTransaction(ctx context.Context, request protocol.SimulateTransactionRequest) (protocol.SimulateTransactionResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SimulateTransaction")
	}

	var r0 protocol.SimulateTransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, protocol.SimulateTransactionRequest) (protocol.SimulateTransactionResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, protocol.SimulateTransactionRequest) protocol.SimulateTransactionResponse); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(protocol.SimulateTransactionResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, protocol.SimulateTransactionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRPCClient creates a new instance of MockRPCClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRPCClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRPCClient {
	mock := &MockRPCClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
