// Code generated by mockery v2.27.1. DO NOT EDIT.

package circle

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockClientConfigModel is an autogenerated mock type for the ClientConfigModelInterface type
type MockClientConfigModel struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx
func (_m *MockClientConfigModel) Get(ctx context.Context) (*ClientConfig, error) {
	ret := _m.Called(ctx)

	var r0 *ClientConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*ClientConfig, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *ClientConfig); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ClientConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDecryptedAPIKey provides a mock function with given fields: ctx, passphrase
func (_m *MockClientConfigModel) GetDecryptedAPIKey(ctx context.Context, passphrase string) (string, error) {
	ret := _m.Called(ctx, passphrase)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, passphrase)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, passphrase)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, passphrase)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: ctx, configUpdate
func (_m *MockClientConfigModel) Upsert(ctx context.Context, configUpdate ClientConfigUpdate) error {
	ret := _m.Called(ctx, configUpdate)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ClientConfigUpdate) error); ok {
		r0 = rf(ctx, configUpdate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockClientConfigModel interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockClientConfigModel creates a new instance of MockClientConfigModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockClientConfigModel(t mockConstructorTestingTNewMockClientConfigModel) *MockClientConfigModel {
	mock := &MockClientConfigModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
