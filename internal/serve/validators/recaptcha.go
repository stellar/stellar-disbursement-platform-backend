package validators

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"
)

const (
	// timeoutOrDuplicateErrorCode is not a configuration error.
	// Reference: https://developers.google.com/recaptcha/docs/verify#error_code_reference
	timeoutOrDuplicateErrorCode = "timeout-or-duplicate"

	// verifyTokenURL is the URL used to verify if the token generated by captcha is valid.
	verifyTokenURL = "https://www.google.com/recaptcha/api/siteverify"
)

type ReCAPTCHAValidator interface {
	IsTokenValid(ctx context.Context, token string) (bool, error)
}

type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

type GoogleReCAPTCHAValidator struct {
	SiteSecretKey  string
	VerifyTokenURL string
	BaseURL        string
	HTTPClient     HTTPClient
}

type verifyTokenResponse struct {
	Success    bool     `json:"success"`
	ErrorCodes []string `json:"error-codes"`
}

func (v *GoogleReCAPTCHAValidator) IsTokenValid(ctx context.Context, token string) (bool, error) {
	payload := fmt.Sprintf("secret=%s&response=%s", v.SiteSecretKey, token)

	req, err := http.NewRequestWithContext(ctx, http.MethodPost, v.VerifyTokenURL, strings.NewReader(payload))
	if err != nil {
		return false, fmt.Errorf("error creating request: %w", err)
	}

	// The request doesn't work with application/json MIME type
	req.Header.Add("Content-Type", "application/x-www-form-urlencoded")

	resp, err := v.HTTPClient.Do(req)
	if err != nil {
		return false, fmt.Errorf("error requesting verify reCAPTCHA token: %w", err)
	}
	defer resp.Body.Close()

	respBodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return false, fmt.Errorf("error reading body response: %w", err)
	}

	var respBody verifyTokenResponse
	if err := json.Unmarshal(respBodyBytes, &respBody); err != nil {
		return false, fmt.Errorf("error unmarshalling body response: %w", err)
	}

	for _, errorCode := range respBody.ErrorCodes {
		if errorCode == timeoutOrDuplicateErrorCode {
			return false, nil
		}
	}

	if len(respBody.ErrorCodes) > 0 {
		return false, fmt.Errorf("error returned by verify reCAPTCHA token: %v", respBody.ErrorCodes)
	}

	return respBody.Success, nil
}

func NewGoogleReCAPTCHAValidator(siteSecretKey string, httpClient HTTPClient) *GoogleReCAPTCHAValidator {
	return &GoogleReCAPTCHAValidator{
		SiteSecretKey:  siteSecretKey,
		VerifyTokenURL: verifyTokenURL,
		HTTPClient:     httpClient,
	}
}
