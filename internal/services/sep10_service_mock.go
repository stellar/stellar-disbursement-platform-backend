// Code generated by mockery v2.53.3. DO NOT EDIT.

package services

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSEP10Service is an autogenerated mock type for the SEP10Service type
type MockSEP10Service struct {
	mock.Mock
}

// CreateChallenge provides a mock function with given fields: ctx, req
func (_m *MockSEP10Service) CreateChallenge(ctx context.Context, req ChallengeRequest) (*ChallengeResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateChallenge")
	}

	var r0 *ChallengeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ChallengeRequest) (*ChallengeResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ChallengeRequest) *ChallengeResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ChallengeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ChallengeRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateChallenge provides a mock function with given fields: ctx, req
func (_m *MockSEP10Service) ValidateChallenge(ctx context.Context, req ValidationRequest) (*ValidationResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ValidateChallenge")
	}

	var r0 *ValidationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ValidationRequest) (*ValidationResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ValidationRequest) *ValidationResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ValidationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ValidationRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockSEP10Service creates a new instance of MockSEP10Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSEP10Service(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSEP10Service {
	mock := &MockSEP10Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
