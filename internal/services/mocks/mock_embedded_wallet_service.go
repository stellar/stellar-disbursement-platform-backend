// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/stellar/stellar-disbursement-platform-backend/internal/data"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEmbeddedWalletService creates a new instance of MockEmbeddedWalletService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEmbeddedWalletService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEmbeddedWalletService {
	mock := &MockEmbeddedWalletService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEmbeddedWalletService is an autogenerated mock type for the EmbeddedWalletServiceInterface type
type MockEmbeddedWalletService struct {
	mock.Mock
}

type MockEmbeddedWalletService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEmbeddedWalletService) EXPECT() *MockEmbeddedWalletService_Expecter {
	return &MockEmbeddedWalletService_Expecter{mock: &_m.Mock}
}

// CreateWallet provides a mock function for the type MockEmbeddedWalletService
func (_mock *MockEmbeddedWalletService) CreateWallet(ctx context.Context, tenantID string, token string, publicKey string) error {
	ret := _mock.Called(ctx, tenantID, token, publicKey)

	if len(ret) == 0 {
		panic("no return value specified for CreateWallet")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, tenantID, token, publicKey)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEmbeddedWalletService_CreateWallet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWallet'
type MockEmbeddedWalletService_CreateWallet_Call struct {
	*mock.Call
}

// CreateWallet is a helper method to define mock.On call
//   - ctx
//   - tenantID
//   - token
//   - publicKey
func (_e *MockEmbeddedWalletService_Expecter) CreateWallet(ctx interface{}, tenantID interface{}, token interface{}, publicKey interface{}) *MockEmbeddedWalletService_CreateWallet_Call {
	return &MockEmbeddedWalletService_CreateWallet_Call{Call: _e.mock.On("CreateWallet", ctx, tenantID, token, publicKey)}
}

func (_c *MockEmbeddedWalletService_CreateWallet_Call) Run(run func(ctx context.Context, tenantID string, token string, publicKey string)) *MockEmbeddedWalletService_CreateWallet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockEmbeddedWalletService_CreateWallet_Call) Return(err error) *MockEmbeddedWalletService_CreateWallet_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEmbeddedWalletService_CreateWallet_Call) RunAndReturn(run func(ctx context.Context, tenantID string, token string, publicKey string) error) *MockEmbeddedWalletService_CreateWallet_Call {
	_c.Call.Return(run)
	return _c
}

// GetWallet provides a mock function for the type MockEmbeddedWalletService
func (_mock *MockEmbeddedWalletService) GetWallet(ctx context.Context, tenantID string, token string) (*data.EmbeddedWallet, error) {
	ret := _mock.Called(ctx, tenantID, token)

	if len(ret) == 0 {
		panic("no return value specified for GetWallet")
	}

	var r0 *data.EmbeddedWallet
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*data.EmbeddedWallet, error)); ok {
		return returnFunc(ctx, tenantID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *data.EmbeddedWallet); ok {
		r0 = returnFunc(ctx, tenantID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.EmbeddedWallet)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, tenantID, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEmbeddedWalletService_GetWallet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWallet'
type MockEmbeddedWalletService_GetWallet_Call struct {
	*mock.Call
}

// GetWallet is a helper method to define mock.On call
//   - ctx
//   - tenantID
//   - token
func (_e *MockEmbeddedWalletService_Expecter) GetWallet(ctx interface{}, tenantID interface{}, token interface{}) *MockEmbeddedWalletService_GetWallet_Call {
	return &MockEmbeddedWalletService_GetWallet_Call{Call: _e.mock.On("GetWallet", ctx, tenantID, token)}
}

func (_c *MockEmbeddedWalletService_GetWallet_Call) Run(run func(ctx context.Context, tenantID string, token string)) *MockEmbeddedWalletService_GetWallet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockEmbeddedWalletService_GetWallet_Call) Return(embeddedWallet *data.EmbeddedWallet, err error) *MockEmbeddedWalletService_GetWallet_Call {
	_c.Call.Return(embeddedWallet, err)
	return _c
}

func (_c *MockEmbeddedWalletService_GetWallet_Call) RunAndReturn(run func(ctx context.Context, tenantID string, token string) (*data.EmbeddedWallet, error)) *MockEmbeddedWalletService_GetWallet_Call {
	_c.Call.Return(run)
	return _c
}
