// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	data "github.com/stellar/stellar-disbursement-platform-backend/internal/data"
	mock "github.com/stretchr/testify/mock"
)

// MockEmbeddedWalletService is an autogenerated mock type for the EmbeddedWalletServiceInterface type
type MockEmbeddedWalletService struct {
	mock.Mock
}

// CreateInvitationToken provides a mock function with given fields: ctx, tenantID
func (_m *MockEmbeddedWalletService) CreateInvitationToken(ctx context.Context, tenantID string) (string, error) {
	ret := _m.Called(ctx, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvitationToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, tenantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, tenantID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWallet provides a mock function with given fields: ctx, tenantID, token, publicKey
func (_m *MockEmbeddedWalletService) CreateWallet(ctx context.Context, tenantID string, token string, publicKey string) error {
	ret := _m.Called(ctx, tenantID, token, publicKey)

	if len(ret) == 0 {
		panic("no return value specified for CreateWallet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, tenantID, token, publicKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWallet provides a mock function with given fields: ctx, tenantID, token
func (_m *MockEmbeddedWalletService) GetWallet(ctx context.Context, tenantID string, token string) (*data.EmbeddedWallet, error) {
	ret := _m.Called(ctx, tenantID, token)

	if len(ret) == 0 {
		panic("no return value specified for GetWallet")
	}

	var r0 *data.EmbeddedWallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*data.EmbeddedWallet, error)); ok {
		return rf(ctx, tenantID, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *data.EmbeddedWallet); ok {
		r0 = rf(ctx, tenantID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.EmbeddedWallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tenantID, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockEmbeddedWalletService creates a new instance of MockEmbeddedWalletService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEmbeddedWalletService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEmbeddedWalletService {
	mock := &MockEmbeddedWalletService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
