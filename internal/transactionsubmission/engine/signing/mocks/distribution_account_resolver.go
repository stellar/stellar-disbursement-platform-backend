// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"

	schema "github.com/stellar/stellar-disbursement-platform-backend/pkg/schema"
	mock "github.com/stretchr/testify/mock"
)

// MockDistributionAccountResolver is an autogenerated mock type for the DistributionAccountResolver type
type MockDistributionAccountResolver struct {
	mock.Mock
}

// DistributionAccount provides a mock function with given fields: ctx, tenantID
func (_m *MockDistributionAccountResolver) DistributionAccount(ctx context.Context, tenantID string) (*schema.DistributionAccount, error) {
	ret := _m.Called(ctx, tenantID)

	var r0 *schema.DistributionAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*schema.DistributionAccount, error)); ok {
		return rf(ctx, tenantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *schema.DistributionAccount); ok {
		r0 = rf(ctx, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.DistributionAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DistributionAccountFromContext provides a mock function with given fields: ctx
func (_m *MockDistributionAccountResolver) DistributionAccountFromContext(ctx context.Context) (*schema.DistributionAccount, error) {
	ret := _m.Called(ctx)

	var r0 *schema.DistributionAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*schema.DistributionAccount, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *schema.DistributionAccount); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.DistributionAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HostDistributionAccount provides a mock function with given fields:
func (_m *MockDistributionAccountResolver) HostDistributionAccount() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewMockDistributionAccountResolver interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDistributionAccountResolver creates a new instance of MockDistributionAccountResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDistributionAccountResolver(t mockConstructorTestingTNewMockDistributionAccountResolver) *MockDistributionAccountResolver {
	mock := &MockDistributionAccountResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
