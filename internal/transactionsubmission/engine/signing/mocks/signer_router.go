// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"

	schema "github.com/stellar/stellar-disbursement-platform-backend/pkg/schema"
	mock "github.com/stretchr/testify/mock"

	txnbuild "github.com/stellar/go/txnbuild"
)

// MockSignerRouter is an autogenerated mock type for the SignerRouter type
type MockSignerRouter struct {
	mock.Mock
}

// BatchInsert provides a mock function with given fields: ctx, accountType, number
func (_m *MockSignerRouter) BatchInsert(ctx context.Context, accountType schema.AccountType, number int) ([]schema.TransactionAccount, error) {
	ret := _m.Called(ctx, accountType, number)

	var r0 []schema.TransactionAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.AccountType, int) ([]schema.TransactionAccount, error)); ok {
		return rf(ctx, accountType, number)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.AccountType, int) []schema.TransactionAccount); ok {
		r0 = rf(ctx, accountType, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schema.TransactionAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.AccountType, int) error); ok {
		r1 = rf(ctx, accountType, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, stellarAccount
func (_m *MockSignerRouter) Delete(ctx context.Context, stellarAccount schema.TransactionAccount) error {
	ret := _m.Called(ctx, stellarAccount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TransactionAccount) error); ok {
		r0 = rf(ctx, stellarAccount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NetworkPassphrase provides a mock function with given fields:
func (_m *MockSignerRouter) NetworkPassphrase() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SignFeeBumpStellarTransaction provides a mock function with given fields: ctx, feeBumpStellarTx, stellarAccounts
func (_m *MockSignerRouter) SignFeeBumpStellarTransaction(ctx context.Context, feeBumpStellarTx *txnbuild.FeeBumpTransaction, stellarAccounts ...schema.TransactionAccount) (*txnbuild.FeeBumpTransaction, error) {
	_va := make([]interface{}, len(stellarAccounts))
	for _i := range stellarAccounts {
		_va[_i] = stellarAccounts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, feeBumpStellarTx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *txnbuild.FeeBumpTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *txnbuild.FeeBumpTransaction, ...schema.TransactionAccount) (*txnbuild.FeeBumpTransaction, error)); ok {
		return rf(ctx, feeBumpStellarTx, stellarAccounts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *txnbuild.FeeBumpTransaction, ...schema.TransactionAccount) *txnbuild.FeeBumpTransaction); ok {
		r0 = rf(ctx, feeBumpStellarTx, stellarAccounts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*txnbuild.FeeBumpTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *txnbuild.FeeBumpTransaction, ...schema.TransactionAccount) error); ok {
		r1 = rf(ctx, feeBumpStellarTx, stellarAccounts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignStellarTransaction provides a mock function with given fields: ctx, stellarTx, stellarAccounts
func (_m *MockSignerRouter) SignStellarTransaction(ctx context.Context, stellarTx *txnbuild.Transaction, stellarAccounts ...schema.TransactionAccount) (*txnbuild.Transaction, error) {
	_va := make([]interface{}, len(stellarAccounts))
	for _i := range stellarAccounts {
		_va[_i] = stellarAccounts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, stellarTx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *txnbuild.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *txnbuild.Transaction, ...schema.TransactionAccount) (*txnbuild.Transaction, error)); ok {
		return rf(ctx, stellarTx, stellarAccounts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *txnbuild.Transaction, ...schema.TransactionAccount) *txnbuild.Transaction); ok {
		r0 = rf(ctx, stellarTx, stellarAccounts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*txnbuild.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *txnbuild.Transaction, ...schema.TransactionAccount) error); ok {
		r1 = rf(ctx, stellarTx, stellarAccounts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SupportedAccountTypes provides a mock function with given fields:
func (_m *MockSignerRouter) SupportedAccountTypes() []schema.AccountType {
	ret := _m.Called()

	var r0 []schema.AccountType
	if rf, ok := ret.Get(0).(func() []schema.AccountType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schema.AccountType)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockSignerRouter interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockSignerRouter creates a new instance of MockSignerRouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockSignerRouter(t mockConstructorTestingTNewMockSignerRouter) *MockSignerRouter {
	mock := &MockSignerRouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
