// Code generated by mockery v2.53.5. DO NOT EDIT.

package transactionsubmission

import (
	context "context"

	txnbuild "github.com/stellar/go/txnbuild"
	store "github.com/stellar/stellar-disbursement-platform-backend/internal/transactionsubmission/store"
	mock "github.com/stretchr/testify/mock"
)

// MockTransactionHandler is an autogenerated mock type for the TransactionHandlerInterface type
type MockTransactionHandler struct {
	mock.Mock
}

// AddContextLoggerFields provides a mock function with given fields: transaction
func (_m *MockTransactionHandler) AddContextLoggerFields(transaction *store.Transaction) map[string]interface{} {
	ret := _m.Called(transaction)

	if len(ret) == 0 {
		panic("no return value specified for AddContextLoggerFields")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(*store.Transaction) map[string]interface{}); ok {
		r0 = rf(transaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// BuildInnerTransaction provides a mock function with given fields: ctx, txJob, sequenceNumber, distributionAccount
func (_m *MockTransactionHandler) BuildInnerTransaction(ctx context.Context, txJob *TxJob, sequenceNumber int64, distributionAccount string) (*txnbuild.Transaction, error) {
	ret := _m.Called(ctx, txJob, sequenceNumber, distributionAccount)

	if len(ret) == 0 {
		panic("no return value specified for BuildInnerTransaction")
	}

	var r0 *txnbuild.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *TxJob, int64, string) (*txnbuild.Transaction, error)); ok {
		return rf(ctx, txJob, sequenceNumber, distributionAccount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *TxJob, int64, string) *txnbuild.Transaction); ok {
		r0 = rf(ctx, txJob, sequenceNumber, distributionAccount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*txnbuild.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *TxJob, int64, string) error); ok {
		r1 = rf(ctx, txJob, sequenceNumber, distributionAccount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MonitorTransactionProcessingFailed provides a mock function with given fields: ctx, txJob, jobUUID, isRetryable, errStack
func (_m *MockTransactionHandler) MonitorTransactionProcessingFailed(ctx context.Context, txJob *TxJob, jobUUID string, isRetryable bool, errStack string) {
	_m.Called(ctx, txJob, jobUUID, isRetryable, errStack)
}

// MonitorTransactionProcessingStarted provides a mock function with given fields: ctx, txJob, jobUUID
func (_m *MockTransactionHandler) MonitorTransactionProcessingStarted(ctx context.Context, txJob *TxJob, jobUUID string) {
	_m.Called(ctx, txJob, jobUUID)
}

// MonitorTransactionProcessingSuccess provides a mock function with given fields: ctx, txJob, jobUUID
func (_m *MockTransactionHandler) MonitorTransactionProcessingSuccess(ctx context.Context, txJob *TxJob, jobUUID string) {
	_m.Called(ctx, txJob, jobUUID)
}

// MonitorTransactionReconciliationFailure provides a mock function with given fields: ctx, txJob, jobUUID, isHorizonErr, errStack
func (_m *MockTransactionHandler) MonitorTransactionReconciliationFailure(ctx context.Context, txJob *TxJob, jobUUID string, isHorizonErr bool, errStack string) {
	_m.Called(ctx, txJob, jobUUID, isHorizonErr, errStack)
}

// MonitorTransactionReconciliationSuccess provides a mock function with given fields: ctx, txJob, jobUUID, successType
func (_m *MockTransactionHandler) MonitorTransactionReconciliationSuccess(ctx context.Context, txJob *TxJob, jobUUID string, successType ReconcileSuccessType) {
	_m.Called(ctx, txJob, jobUUID, successType)
}

// RequiresRebuildOnRetry provides a mock function with no fields
func (_m *MockTransactionHandler) RequiresRebuildOnRetry() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RequiresRebuildOnRetry")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewMockTransactionHandler creates a new instance of MockTransactionHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionHandler {
	mock := &MockTransactionHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
