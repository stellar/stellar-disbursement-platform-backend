// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"

	store "github.com/stellar/stellar-disbursement-platform-backend/internal/transactionsubmission/store"
	mock "github.com/stretchr/testify/mock"
)

// MockStellarSignatoryStore is an autogenerated mock type for the StellarSignatoryStore type
type MockStellarSignatoryStore struct {
	mock.Mock
}

// BatchInsert provides a mock function with given fields: ctx, stellarSignatories
func (_m *MockStellarSignatoryStore) BatchInsert(ctx context.Context, stellarSignatories []*store.StellarSignatory) error {
	ret := _m.Called(ctx, stellarSignatories)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*store.StellarSignatory) error); ok {
		r0 = rf(ctx, stellarSignatories)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, publicKey
func (_m *MockStellarSignatoryStore) Delete(ctx context.Context, publicKey string) error {
	ret := _m.Called(ctx, publicKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, publicKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, publicKey
func (_m *MockStellarSignatoryStore) Get(ctx context.Context, publicKey string) (*store.StellarSignatory, error) {
	ret := _m.Called(ctx, publicKey)

	var r0 *store.StellarSignatory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*store.StellarSignatory, error)); ok {
		return rf(ctx, publicKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *store.StellarSignatory); ok {
		r0 = rf(ctx, publicKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.StellarSignatory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, publicKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockStellarSignatoryStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockStellarSignatoryStore creates a new instance of MockStellarSignatoryStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockStellarSignatoryStore(t mockConstructorTestingTNewMockStellarSignatoryStore) *MockStellarSignatoryStore {
	mock := &MockStellarSignatoryStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
