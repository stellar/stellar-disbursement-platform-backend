// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/stellar/stellar-disbursement-platform-backend/db"
	mock "github.com/stretchr/testify/mock"

	store "github.com/stellar/stellar-disbursement-platform-backend/internal/transactionsubmission/store"
)

// MockTransactionStore is an autogenerated mock type for the TransactionStore type
type MockTransactionStore struct {
	mock.Mock
}

// BulkInsert provides a mock function with given fields: ctx, sqlExec, transactions
func (_m *MockTransactionStore) BulkInsert(ctx context.Context, sqlExec db.SQLExecuter, transactions []store.Transaction) ([]store.Transaction, error) {
	ret := _m.Called(ctx, sqlExec, transactions)

	var r0 []store.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLExecuter, []store.Transaction) ([]store.Transaction, error)); ok {
		return rf(ctx, sqlExec, transactions)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLExecuter, []store.Transaction) []store.Transaction); ok {
		r0 = rf(ctx, sqlExec, transactions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]store.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.SQLExecuter, []store.Transaction) error); ok {
		r1 = rf(ctx, sqlExec, transactions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, txID
func (_m *MockTransactionStore) Get(ctx context.Context, txID string) (*store.Transaction, error) {
	ret := _m.Called(ctx, txID)

	var r0 *store.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*store.Transaction, error)); ok {
		return rf(ctx, txID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *store.Transaction); ok {
		r0 = rf(ctx, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByPaymentIDs provides a mock function with given fields: ctx, paymentIDs
func (_m *MockTransactionStore) GetAllByPaymentIDs(ctx context.Context, paymentIDs []string) ([]*store.Transaction, error) {
	ret := _m.Called(ctx, paymentIDs)

	var r0 []*store.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*store.Transaction, error)); ok {
		return rf(ctx, paymentIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*store.Transaction); ok {
		r0 = rf(ctx, paymentIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*store.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, paymentIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionBatchForUpdate provides a mock function with given fields: ctx, dbTx, batchSize
func (_m *MockTransactionStore) GetTransactionBatchForUpdate(ctx context.Context, dbTx db.DBTransaction, batchSize int, tenantID string) ([]*store.Transaction, error) {
	ret := _m.Called(ctx, dbTx, batchSize, tenantID)

	var r0 []*store.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.DBTransaction, int, string) ([]*store.Transaction, error)); ok {
		return rf(ctx, dbTx, batchSize, tenantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.DBTransaction, int, string) []*store.Transaction); ok {
		r0 = rf(ctx, dbTx, batchSize, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*store.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.DBTransaction, int, string) error); ok {
		r1 = rf(ctx, dbTx, batchSize, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionPendingUpdateByID provides a mock function with given fields: ctx, sqlExec, txID
func (_m *MockTransactionStore) GetTransactionPendingUpdateByID(ctx context.Context, sqlExec db.SQLExecuter, txID string) (*store.Transaction, error) {
	ret := _m.Called(ctx, sqlExec, txID)

	var r0 *store.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLExecuter, string) (*store.Transaction, error)); ok {
		return rf(ctx, sqlExec, txID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLExecuter, string) *store.Transaction); ok {
		r0 = rf(ctx, sqlExec, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.SQLExecuter, string) error); ok {
		r1 = rf(ctx, sqlExec, txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, tx
func (_m *MockTransactionStore) Insert(ctx context.Context, tx store.Transaction) (*store.Transaction, error) {
	ret := _m.Called(ctx, tx)

	var r0 *store.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, store.Transaction) (*store.Transaction, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, store.Transaction) *store.Transaction); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, store.Transaction) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Lock provides a mock function with given fields: ctx, sqlExec, transactionID, currentLedger, nextLedgerLock
func (_m *MockTransactionStore) Lock(ctx context.Context, sqlExec db.SQLExecuter, transactionID string, currentLedger int32, nextLedgerLock int32) (*store.Transaction, error) {
	ret := _m.Called(ctx, sqlExec, transactionID, currentLedger, nextLedgerLock)

	var r0 *store.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLExecuter, string, int32, int32) (*store.Transaction, error)); ok {
		return rf(ctx, sqlExec, transactionID, currentLedger, nextLedgerLock)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLExecuter, string, int32, int32) *store.Transaction); ok {
		r0 = rf(ctx, sqlExec, transactionID, currentLedger, nextLedgerLock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.SQLExecuter, string, int32, int32) error); ok {
		r1 = rf(ctx, sqlExec, transactionID, currentLedger, nextLedgerLock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareTransactionForReprocessing provides a mock function with given fields: ctx, sqlExec, transactionID
func (_m *MockTransactionStore) PrepareTransactionForReprocessing(ctx context.Context, sqlExec db.SQLExecuter, transactionID string) (*store.Transaction, error) {
	ret := _m.Called(ctx, sqlExec, transactionID)

	var r0 *store.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLExecuter, string) (*store.Transaction, error)); ok {
		return rf(ctx, sqlExec, transactionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLExecuter, string) *store.Transaction); ok {
		r0 = rf(ctx, sqlExec, transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.SQLExecuter, string) error); ok {
		r1 = rf(ctx, sqlExec, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unlock provides a mock function with given fields: ctx, sqlExec, publicKey
func (_m *MockTransactionStore) Unlock(ctx context.Context, sqlExec db.SQLExecuter, publicKey string) (*store.Transaction, error) {
	ret := _m.Called(ctx, sqlExec, publicKey)

	var r0 *store.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLExecuter, string) (*store.Transaction, error)); ok {
		return rf(ctx, sqlExec, publicKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLExecuter, string) *store.Transaction); ok {
		r0 = rf(ctx, sqlExec, publicKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.SQLExecuter, string) error); ok {
		r1 = rf(ctx, sqlExec, publicKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusToError provides a mock function with given fields: ctx, tx, message
func (_m *MockTransactionStore) UpdateStatusToError(ctx context.Context, tx store.Transaction, message string) (*store.Transaction, error) {
	ret := _m.Called(ctx, tx, message)

	var r0 *store.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, store.Transaction, string) (*store.Transaction, error)); ok {
		return rf(ctx, tx, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, store.Transaction, string) *store.Transaction); ok {
		r0 = rf(ctx, tx, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, store.Transaction, string) error); ok {
		r1 = rf(ctx, tx, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusToSuccess provides a mock function with given fields: ctx, tx
func (_m *MockTransactionStore) UpdateStatusToSuccess(ctx context.Context, tx store.Transaction) (*store.Transaction, error) {
	ret := _m.Called(ctx, tx)

	var r0 *store.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, store.Transaction) (*store.Transaction, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, store.Transaction) *store.Transaction); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, store.Transaction) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStellarTransactionHashAndXDRSent provides a mock function with given fields: ctx, txID, txHash, txXDRSent
func (_m *MockTransactionStore) UpdateStellarTransactionHashAndXDRSent(ctx context.Context, txID string, txHash string, txXDRSent string) (*store.Transaction, error) {
	ret := _m.Called(ctx, txID, txHash, txXDRSent)

	var r0 *store.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*store.Transaction, error)); ok {
		return rf(ctx, txID, txHash, txXDRSent)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *store.Transaction); ok {
		r0 = rf(ctx, txID, txHash, txXDRSent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, txID, txHash, txXDRSent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStellarTransactionXDRReceived provides a mock function with given fields: ctx, txID, xdrReceived
func (_m *MockTransactionStore) UpdateStellarTransactionXDRReceived(ctx context.Context, txID string, xdrReceived string) (*store.Transaction, error) {
	ret := _m.Called(ctx, txID, xdrReceived)

	var r0 *store.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*store.Transaction, error)); ok {
		return rf(ctx, txID, xdrReceived)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *store.Transaction); ok {
		r0 = rf(ctx, txID, xdrReceived)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, txID, xdrReceived)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSyncedTransactions provides a mock function with given fields: ctx, sqlExec, txIDs
func (_m *MockTransactionStore) UpdateSyncedTransactions(ctx context.Context, sqlExec db.SQLExecuter, txIDs []string) error {
	ret := _m.Called(ctx, sqlExec, txIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.SQLExecuter, []string) error); ok {
		r0 = rf(ctx, sqlExec, txIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockTransactionStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTransactionStore creates a new instance of MockTransactionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTransactionStore(t mockConstructorTestingTNewMockTransactionStore) *MockTransactionStore {
	mock := &MockTransactionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
