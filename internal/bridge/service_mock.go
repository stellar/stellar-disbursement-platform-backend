// Code generated by mockery v2.40.1. DO NOT EDIT.

package bridge

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the ServiceInterface type
type MockService struct {
	mock.Mock
}

// CreateVirtualAccount provides a mock function with given fields: ctx, userID, distributionAccountAddress
func (_m *MockService) CreateVirtualAccount(ctx context.Context, userID string, distributionAccountAddress string) (*BridgeIntegrationInfo, error) {
	ret := _m.Called(ctx, userID, distributionAccountAddress)

	if len(ret) == 0 {
		panic("no return value specified for CreateVirtualAccount")
	}

	var r0 *BridgeIntegrationInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*BridgeIntegrationInfo, error)); ok {
		return rf(ctx, userID, distributionAccountAddress)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *BridgeIntegrationInfo); ok {
		r0 = rf(ctx, userID, distributionAccountAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BridgeIntegrationInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, distributionAccountAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBridgeIntegration provides a mock function with given fields: ctx
func (_m *MockService) GetBridgeIntegration(ctx context.Context) (*BridgeIntegrationInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBridgeIntegration")
	}

	var r0 *BridgeIntegrationInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*BridgeIntegrationInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *BridgeIntegrationInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BridgeIntegrationInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OptInToBridge provides a mock function with given fields: ctx, userID, fullName, email
func (_m *MockService) OptInToBridge(ctx context.Context, userID string, fullName string, email string) (*BridgeIntegrationInfo, error) {
	ret := _m.Called(ctx, userID, fullName, email)

	if len(ret) == 0 {
		panic("no return value specified for OptInToBridge")
	}

	var r0 *BridgeIntegrationInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*BridgeIntegrationInfo, error)); ok {
		return rf(ctx, userID, fullName, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *BridgeIntegrationInfo); ok {
		r0 = rf(ctx, userID, fullName, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BridgeIntegrationInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, userID, fullName, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
