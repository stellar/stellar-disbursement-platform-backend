// Code generated by mockery v2.40.1. DO NOT EDIT.

package bridge

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the ClientInterface type
type MockClient struct {
	mock.Mock
}

// GetKYCLink provides a mock function with given fields: ctx, kycLinkID
func (_m *MockClient) GetKYCLink(ctx context.Context, kycLinkID string) (*KYCLinkInfo, error) {
	ret := _m.Called(ctx, kycLinkID)

	if len(ret) == 0 {
		panic("no return value specified for GetKYCLink")
	}

	var r0 *KYCLinkInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*KYCLinkInfo, error)); ok {
		return rf(ctx, kycLinkID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *KYCLinkInfo); ok {
		r0 = rf(ctx, kycLinkID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*KYCLinkInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, kycLinkID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVirtualAccount provides a mock function with given fields: ctx, customerID, virtualAccountID
func (_m *MockClient) GetVirtualAccount(ctx context.Context, customerID string, virtualAccountID string) (*VirtualAccountInfo, error) {
	ret := _m.Called(ctx, customerID, virtualAccountID)

	if len(ret) == 0 {
		panic("no return value specified for GetVirtualAccount")
	}

	var r0 *VirtualAccountInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*VirtualAccountInfo, error)); ok {
		return rf(ctx, customerID, virtualAccountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *VirtualAccountInfo); ok {
		r0 = rf(ctx, customerID, virtualAccountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*VirtualAccountInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, virtualAccountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostKYCLink provides a mock function with given fields: ctx, request
func (_m *MockClient) PostKYCLink(ctx context.Context, request KYCLinkRequest) (*KYCLinkInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PostKYCLink")
	}

	var r0 *KYCLinkInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, KYCLinkRequest) (*KYCLinkInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, KYCLinkRequest) *KYCLinkInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*KYCLinkInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, KYCLinkRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostVirtualAccount provides a mock function with given fields: ctx, customerID, request
func (_m *MockClient) PostVirtualAccount(ctx context.Context, customerID string, request VirtualAccountRequest) (*VirtualAccountInfo, error) {
	ret := _m.Called(ctx, customerID, request)

	if len(ret) == 0 {
		panic("no return value specified for PostVirtualAccount")
	}

	var r0 *VirtualAccountInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, VirtualAccountRequest) (*VirtualAccountInfo, error)); ok {
		return rf(ctx, customerID, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, VirtualAccountRequest) *VirtualAccountInfo); ok {
		r0 = rf(ctx, customerID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*VirtualAccountInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, VirtualAccountRequest) error); ok {
		r1 = rf(ctx, customerID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
