// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	data "github.com/stellar/stellar-disbursement-platform-backend/internal/data"

	mock "github.com/stretchr/testify/mock"

	protocol "github.com/go-webauthn/webauthn/protocol"

	webauthn "github.com/go-webauthn/webauthn/webauthn"
)

// MockWebAuthnService is an autogenerated mock type for the WebAuthnServiceInterface type
type MockWebAuthnService struct {
	mock.Mock
}

// FinishPasskeyAuthentication provides a mock function with given fields: ctx, request
func (_m *MockWebAuthnService) FinishPasskeyAuthentication(ctx context.Context, request *http.Request) (*data.EmbeddedWallet, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for FinishPasskeyAuthentication")
	}

	var r0 *data.EmbeddedWallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) (*data.EmbeddedWallet, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) *data.EmbeddedWallet); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.EmbeddedWallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *http.Request) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinishPasskeyRegistration provides a mock function with given fields: ctx, token, request
func (_m *MockWebAuthnService) FinishPasskeyRegistration(ctx context.Context, token string, request *http.Request) (*webauthn.Credential, error) {
	ret := _m.Called(ctx, token, request)

	if len(ret) == 0 {
		panic("no return value specified for FinishPasskeyRegistration")
	}

	var r0 *webauthn.Credential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *http.Request) (*webauthn.Credential, error)); ok {
		return rf(ctx, token, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *http.Request) *webauthn.Credential); ok {
		r0 = rf(ctx, token, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*webauthn.Credential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *http.Request) error); ok {
		r1 = rf(ctx, token, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartPasskeyAuthentication provides a mock function with given fields: ctx
func (_m *MockWebAuthnService) StartPasskeyAuthentication(ctx context.Context) (*protocol.CredentialAssertion, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StartPasskeyAuthentication")
	}

	var r0 *protocol.CredentialAssertion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*protocol.CredentialAssertion, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *protocol.CredentialAssertion); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.CredentialAssertion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartPasskeyRegistration provides a mock function with given fields: ctx, token
func (_m *MockWebAuthnService) StartPasskeyRegistration(ctx context.Context, token string) (*protocol.CredentialCreation, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for StartPasskeyRegistration")
	}

	var r0 *protocol.CredentialCreation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*protocol.CredentialCreation, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *protocol.CredentialCreation); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.CredentialCreation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockWebAuthnService creates a new instance of MockWebAuthnService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWebAuthnService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWebAuthnService {
	mock := &MockWebAuthnService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
