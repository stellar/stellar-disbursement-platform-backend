// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockWalletJWTManager is an autogenerated mock type for the WalletJWTManager type
type MockWalletJWTManager struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: ctx, credentialID, contractAddress, expiresAt
func (_m *MockWalletJWTManager) GenerateToken(ctx context.Context, credentialID string, contractAddress string, expiresAt time.Time) (string, error) {
	ret := _m.Called(ctx, credentialID, contractAddress, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) (string, error)); ok {
		return rf(ctx, credentialID, contractAddress, expiresAt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) string); ok {
		r0 = rf(ctx, credentialID, contractAddress, expiresAt)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Time) error); ok {
		r1 = rf(ctx, credentialID, contractAddress, expiresAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: ctx, tokenString
func (_m *MockWalletJWTManager) ValidateToken(ctx context.Context, tokenString string) (string, string, error) {
	ret := _m.Called(ctx, tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, string, error)); ok {
		return rf(ctx, tokenString)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, tokenString)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, tokenString)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, tokenString)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewMockWalletJWTManager creates a new instance of MockWalletJWTManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWalletJWTManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWalletJWTManager {
	mock := &MockWalletJWTManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
