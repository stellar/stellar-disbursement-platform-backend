// Code generated by mockery v2.40.1. DO NOT EDIT.

package monitor

import (
	http "net/http"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockMonitorClient is an autogenerated mock type for the MonitorClient type
type MockMonitorClient struct {
	mock.Mock
}

// GetMetricHTTPHandler provides a mock function with given fields:
func (_m *MockMonitorClient) GetMetricHTTPHandler() http.Handler {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetricHTTPHandler")
	}

	var r0 http.Handler
	if rf, ok := ret.Get(0).(func() http.Handler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}

	return r0
}

// GetMetricType provides a mock function with given fields:
func (_m *MockMonitorClient) GetMetricType() MetricType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetricType")
	}

	var r0 MetricType
	if rf, ok := ret.Get(0).(func() MetricType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(MetricType)
	}

	return r0
}

// MonitorCounters provides a mock function with given fields: tag, labels
func (_m *MockMonitorClient) MonitorCounters(tag MetricTag, labels map[string]string) {
	_m.Called(tag, labels)
}

// MonitorDBQueryDuration provides a mock function with given fields: duration, tag, labels
func (_m *MockMonitorClient) MonitorDBQueryDuration(duration time.Duration, tag MetricTag, labels DBQueryLabels) {
	_m.Called(duration, tag, labels)
}

// MonitorDuration provides a mock function with given fields: duration, tag, labels
func (_m *MockMonitorClient) MonitorDuration(duration time.Duration, tag MetricTag, labels map[string]string) {
	_m.Called(duration, tag, labels)
}

// MonitorHistogram provides a mock function with given fields: value, tag, labels
func (_m *MockMonitorClient) MonitorHistogram(value float64, tag MetricTag, labels map[string]string) {
	_m.Called(value, tag, labels)
}

// MonitorHttpRequestDuration provides a mock function with given fields: duration, labels
func (_m *MockMonitorClient) MonitorHTTPRequestDuration(duration time.Duration, labels HTTPRequestLabels) {
	_m.Called(duration, labels)
}

// RegisterFunctionMetric provides a mock function with given fields: metricType, opts
func (_m *MockMonitorClient) RegisterFunctionMetric(metricType FuncMetricType, opts FuncMetricOptions) {
	_m.Called(metricType, opts)
}

// NewMockMonitorClient creates a new instance of MockMonitorClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMonitorClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMonitorClient {
	mock := &MockMonitorClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
