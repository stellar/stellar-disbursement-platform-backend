version: '3.8'

services:
  kafka:
    image: apache/kafka:3.7.0
    ports:
      - "9094:9094"
      - "9092:9092"
    volumes:
      - "kafka-data:/var/lib/kafka/data"
    environment:
      # KRaft settings
      - KAFKA_NODE_ID=0
      - KAFKA_PROCESS_ROLES=controller,broker
      - KAFKA_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      # Use a descriptive cluster ID for development; do not use in production.
      - CLUSTER_ID=dev-cluster-id
    healthcheck:
      test: /opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1
      start_period: 15s
      interval: 10s
      timeout: 10s
      retries: 10

  kafka-init:
    image: apache/kafka:3.7.0
    entrypoint: [ "/bin/bash", "-c" ]
    command: |
      "
        # Create consumer offsets topic explicitly
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --topic __consumer_offsets --partitions 50 --replication-factor 1 --bootstrap-server kafka:9092 || echo 'Consumer offsets topic may already exist'
        
        # Wait a bit for the topic to be fully created
        sleep 2
        
        # Create application topics
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --topic events.receiver-wallets.new_invitation --bootstrap-server kafka:9092
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --topic events.payment.payment_completed --bootstrap-server kafka:9092
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --topic events.payment.ready_to_pay --bootstrap-server kafka:9092
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --topic events.payment.circle_ready_to_pay --bootstrap-server kafka:9092

        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --topic events.receiver-wallets.new_invitation.dlq --bootstrap-server kafka:9092
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --topic events.payment.payment_completed.dlq --bootstrap-server kafka:9092
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --topic events.payment.ready_to_pay.dlq --bootstrap-server kafka:9092
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --topic events.payment.circle_ready_to_pay.dlq --bootstrap-server kafka:9092
      "
    depends_on:
      kafka:
        condition: service_healthy

  sdp-api:
    environment:
      # Kafka Configuration - only used if EVENT_BROKER_TYPE is set to "KAFKA"
      EVENT_BROKER_TYPE: "KAFKA"
      BROKER_URLS: "kafka:9092"
      CONSUMER_GROUP_ID: "group-id"
      KAFKA_SECURITY_PROTOCOL: "PLAINTEXT"

    depends_on:
      kafka:
        condition: service_started
      kafka-init:
        condition: service_completed_successfully

  sdp-tss:
    # Kafka Configuration
    environment:
      EVENT_BROKER_TYPE: "KAFKA"
      BROKER_URLS: "kafka:9092"
      CONSUMER_GROUP_ID: "group-id"
      KAFKA_SECURITY_PROTOCOL: "PLAINTEXT"
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully

volumes:
  kafka-data:
    driver: local