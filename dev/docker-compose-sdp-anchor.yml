version: '3.8'
services:
  db:
    container_name: sdp_v2_database-mtn
    image: postgres:14-alpine
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_DB: sdp_mtn
      PGDATA: /data/postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-db:/data/postgres

  sdp-api:
    container_name: sdp-api-mtn
    image: stellar/sdp-v2:latest
    build:
      context: ../
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
      - "8002:8002"
      - "8003:8003"
    environment:
      BASE_URL: http://localhost:8000
      DATABASE_URL: postgres://postgres@db:5432/sdp_mtn?sslmode=disable
      ENVIRONMENT: localhost
      LOG_LEVEL: TRACE
      PORT: "8000"
      METRICS_PORT: "8002"
      METRICS_TYPE: PROMETHEUS
      EMAIL_SENDER_TYPE: DRY_RUN
      SMS_SENDER_TYPE: DRY_RUN
      NETWORK_PASSPHRASE: "Test SDF Network ; September 2015"
      EC256_PUBLIC_KEY: "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEJ3HNphPAEKHvtRjsl5Kjwc9tTMqS\n2pmYNybrLsxZ6cuQvg2yiEoXZixP2cJ77csHClXC6cb1wQp/BNGDvGKoPg==\n-----END PUBLIC KEY-----"
      SEP10_SIGNING_PUBLIC_KEY: ${SEP10_SIGNING_PUBLIC_KEY}
      ANCHOR_PLATFORM_BASE_SEP_URL: http://localhost:8080
      ANCHOR_PLATFORM_BASE_PLATFORM_URL: http://anchor-platform:8085
      DISTRIBUTION_PUBLIC_KEY: ${DISTRIBUTION_PUBLIC_KEY}
      DISTRIBUTION_SEED: ${DISTRIBUTION_SEED}
      DISTRIBUTION_SIGNER_TYPE: ${DISTRIBUTION_SIGNER_TYPE:-DISTRIBUTION_ACCOUNT_ENV}
      DISTRIBUTION_ACCOUNT_ENCRYPTION_PASSPHRASE: ${DISTRIBUTION_ACCOUNT_ENCRYPTION_PASSPHRASE}
      CHANNEL_ACCOUNT_ENCRYPTION_PASSPHRASE: ${CHANNEL_ACCOUNT_ENCRYPTION_PASSPHRASE}
      RECAPTCHA_SITE_KEY: 6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI
      DISABLE_MFA: "true"
      DISABLE_RECAPTCHA: "true"
      CORS_ALLOWED_ORIGINS: "*"

      # multi-tenant
      INSTANCE_NAME: "SDP Testnet on Docker"
      ENABLE_SCHEDULER: "false"
      EVENT_BROKER_TYPE: "KAFKA"
      BROKER_URLS: "kafka:9092"
      CONSUMER_GROUP_ID: "group-id"
      KAFKA_SECURITY_PROTOCOL: "PLAINTEXT"

      # multi-tenant secrets:
      ADMIN_ACCOUNT: SDP-admin
      ADMIN_API_KEY: api_key_1234567890

      # secrets:
      AWS_ACCESS_KEY_ID: MY_AWS_ACCESS_KEY_ID
      AWS_REGION: MY_AWS_REGION
      AWS_SECRET_ACCESS_KEY: MY_AWS_SECRET_ACCESS_KEY
      AWS_SES_SENDER_ID: MY_AWS_SES_SENDER_ID
      TWILIO_ACCOUNT_SID: MY_TWILIO_ACCOUNT_SID
      TWILIO_AUTH_TOKEN: MY_TWILIO_AUTH_TOKEN
      TWILIO_SERVICE_SID: MY_TWILIO_SERVICE_SID
      EC256_PRIVATE_KEY: "-----BEGIN PRIVATE KEY-----\nMIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgdo6o+tdFkF94B7z8\nnoybH6/zO3PryLLjLbj54/zOi4WhRANCAAQncc2mE8AQoe+1GOyXkqPBz21MypLa\nmZg3JusuzFnpy5C+DbKIShdmLE/ZwnvtywcKVcLpxvXBCn8E0YO8Yqg+\n-----END PRIVATE KEY-----"
      SEP10_SIGNING_PRIVATE_KEY: ${SEP10_SIGNING_PRIVATE_KEY}
      SEP24_JWT_SECRET: jwt_secret_1234567890
      RECAPTCHA_SITE_SECRET_KEY: 6LeIxAcTAAAAAGG-vFI1TnRWxMZNFuojJ4WifJWe
      ANCHOR_PLATFORM_OUTGOING_JWT_SECRET: mySdpToAnchorPlatformSecret
    entrypoint: ""
    command:
      - sh
      - -c
      - |
        sleep 5
        ./stellar-disbursement-platform db admin migrate up
        ./stellar-disbursement-platform db tss migrate up
        ./stellar-disbursement-platform db auth migrate up --all
        ./stellar-disbursement-platform db sdp migrate up --all
        ./stellar-disbursement-platform db setup-for-network --all
        ./stellar-disbursement-platform serve

  db-anchor-platform:
    container_name: anchor-platform-postgres-db-mtn
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      PGPORT: 5433
    ports:
      - "5433:5433"
    volumes:
      - postgres-ap-db:/data/postgres

  anchor-platform:
    container_name: anchor-platform
    image: stellar/anchor-platform:2.5.2
    command: --sep-server --platform-server --platform linux/amd64
    ports:
      - "8080:8080" # sep-server
      - "8085:8085" # platform-server
      - "8082:8082" # metrics
    environment:
      HOST_URL: http://localhost:8080
      SEP_SERVER_PORT: 8080
      CALLBACK_API_BASE_URL: http://sdp-api:8000
      CALLBACK_API_AUTH_TYPE: none  # TODO: update to jwt later
      PLATFORM_SERVER_AUTH_TYPE: JWT
      APP_LOGGING_LEVEL: INFO
      DATA_TYPE: postgres
      DATA_SERVER: db-anchor-platform:5433
      DATA_DATABASE: postgres
      DATA_FLYWAY_ENABLED: "true"
      DATA_DDL_AUTO: update
      METRICS_ENABLED: "false"  # Metrics would be available at port 8082
      METRICS_EXTRAS_ENABLED: "false"
      SEP10_ENABLED: "true"
      SEP10_HOME_DOMAINS: "localhost:8000, redcorp.stellar.local:8000, bluecorp.stellar.local:8000" # Comma separated list of home domains
      SEP10_HOME_DOMAIN: ""
      SEP10_WEB_AUTH_DOMAIN: "localhost:8080"
      # SEP10_CLIENT_ATTRIBUTION_REQUIRED: true  # RECOMMENDED
      # SEP10_CLIENT_ATTRIBUTION_ALLOW_LIST: "demo-wallet-server.stellar.org,https://example.com"  # RECOMMENDED
      SEP24_ENABLED: "true"
      SEP24_INTERACTIVE_URL_BASE_URL: http://localhost:8000/wallet-registration/start
      SEP24_INTERACTIVE_URL_JWT_EXPIRATION: 1800  # 1800 seconds is 30 minutes
      SEP24_MORE_INFO_URL_BASE_URL: http://localhost:8000/wallet-registration/start
      SEP1_ENABLED: "true"
      SEP1_TOML_TYPE: url
      SEP1_TOML_VALUE: http://sdp-api:8000/.well-known/stellar.toml
      ASSETS_TYPE: json
      ASSETS_VALUE: |   # TODO: keep this up to date with the latest assets supported by the SDP
        {
          "assets": [
            {
              "sep24_enabled": true,
              "schema": "stellar",
              "code": "USDC",
              "issuer": "GBBD47IF6LWK7P7MDEVSCWR7DPUWV3NY3DTQEVFL4NAT4AQH3ZLLFLA5",
              "distribution_account": "${DISTRIBUTION_PUBLIC_KEY}",
              "significant_decimals": 7,
              "deposit": {
                "enabled": true,
                "fee_minimum": 0,
                "fee_percent": 0,
                "min_amount": 1,
                "max_amount": 10000
              },
              "withdraw": {"enabled": false}
            },
            {
              "sep24_enabled": true,
              "schema": "stellar",
              "code": "native",
              "issuer": "",
              "distribution_account": "${DISTRIBUTION_PUBLIC_KEY}",
              "significant_decimals": 7,
              "deposit": {
                "enabled": true,
                "fee_minimum": 0,
                "fee_percent": 0,
                "min_amount": 1,
                "max_amount": 10000
              },
              "withdraw": {"enabled": false}
            }
          ]
        }

      # secrets:
      SECRET_DATA_USERNAME: postgres
      SECRET_DATA_PASSWORD: postgres
      SECRET_PLATFORM_API_AUTH_SECRET: mySdpToAnchorPlatformSecret
      SECRET_SEP10_JWT_SECRET: jwt_secret_1234567890
      SECRET_SEP10_SIGNING_SEED: ${SEP10_SIGNING_PRIVATE_KEY}
      SECRET_SEP24_INTERACTIVE_URL_JWT_SECRET: jwt_secret_1234567890
      SECRET_SEP24_MORE_INFO_URL_JWT_SECRET: jwt_secret_1234567890

  kafka:
    image: docker.io/bitnami/kafka:3.6
    ports:
      - "9094:9094"
      - "9092:9092"
    volumes:
      - "kafka-data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    healthcheck:
      test: kafka-topics.sh --bootstrap-server kafka:9092 --list || exit -1
      start_period: 10s
      interval: 10s
      timeout: 10s
      retries: 5

  kafka-init:
    image: docker.io/bitnami/kafka:3.6
    entrypoint: [ "/bin/bash", "-c" ]
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      "
        kafka-topics.sh --create --if-not-exists --topic events.receiver-wallets.new_invitation --bootstrap-server kafka:9092
        kafka-topics.sh --create --if-not-exists --topic events.payment.payment_completed --bootstrap-server kafka:9092
        kafka-topics.sh --create --if-not-exists --topic events.payment.ready_to_pay --bootstrap-server kafka:9092
      "

  db-conduktor:
    image: postgres:14
    hostname: postgresql
    volumes:
      - db-conduktor-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: "conduktor-platform"
      POSTGRES_USER: "conduktor"
      POSTGRES_PASSWORD: "change_me"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"

  conduktor-platform:
    image: conduktor/conduktor-platform:1.19.2
    depends_on:
      - db-conduktor
    ports:
      - "9090:8080"
    volumes:
      - conduktor-platform-data:/var/conduktor
    environment:
      CDK_DATABASE_URL: "postgresql://conduktor:change_me@db-conduktor:5432/conduktor-platform"
      CDK_MONITORING_CORTEX-URL: http://conduktor-monitoring:9009/
      CDK_MONITORING_ALERT-MANAGER-URL: http://conduktor-monitoring:9010/
      CDK_MONITORING_CALLBACK-URL: http://conduktor-platform:9090/monitoring/api/
      CDK_MONITORING_NOTIFICATIONS-CALLBACK-URL: http://localhost:9090
    healthcheck:
      test: curl -f http://localhost:9090/platform/api/modules/health/live || exit 1
      interval: 10s
      start_period: 10s
      timeout: 5s
      retries: 3

  conduktor-monitoring:
    image: conduktor/conduktor-platform-cortex:1.19.2
    environment:
      CDK_CONSOLE-URL: "http://conduktor-platform:9090"

volumes:
  postgres-db:
    driver: local
  postgres-ap-db:
    driver: local
  kafka-data:
    driver: local
  db-conduktor-data:
    driver: local
  conduktor-platform-data:
    driver: local
