Parameters:
  env:
    Type: String
    Default: "dev"
    AllowedValues: 
      - dev
      - staging
      - prod

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair for SSH access

  NetworkStackName:
    Type: String
    Default: "sdp-network"
    Description: Name of the network stack containing VPC and subnet exports

  DatabaseStackName:
    Type: String
    Default: "sdp-database"
    Description: Name of the database stack containing RDS endpoint and credentials

  EksStackName:
    Type: String
    Default: "sdp-eks"
    Description: Name of the EKS stack containing cluster and service exports

Resources:
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for database bastion host
      VpcId: !ImportValue 
        Fn::Sub: ${NetworkStackName}-vpc-id
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: "Allow SSH inbound"
        - IpProtocol: tcp
          FromPort: 2345
          ToPort: 2345
          CidrIp: 0.0.0.0/0
          Description: "Allow Delve debugger connections"
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${env}-db-bastion-sg
        - Key: env
          Value: !Ref env

  BastionHost:
    Type: AWS::EC2::Instance
    DependsOn: BastionSecurityGroup
    Properties:
      InstanceType: t2.micro
      ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64}}'
      KeyName: !Ref KeyName
      SubnetId: !ImportValue 
        Fn::Sub: ${NetworkStackName}-public-subnet-1
      SecurityGroupIds: 
        - !Ref BastionSecurityGroup
      UserData:
        Fn::Base64: |
          #!/bin/bash
          dnf update -y
          dnf install -y postgresql15
          dnf install -y curl jq
      Tags:
        - Key: Name
          Value: !Sub ${env}-db-bastion
        - Key: env
          Value: !Ref env

  RDSIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: BastionSecurityGroup
    Properties:
      GroupId: !ImportValue 
        Fn::Sub: ${DatabaseStackName}-db-sg
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref BastionSecurityGroup
      Description: "Allow PostgreSQL from Bastion Host"

  EksClusterIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: BastionSecurityGroup
    Properties:
      GroupId: !ImportValue 
        Fn::Sub: ${EksStackName}-cluster-sg
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref BastionSecurityGroup
      Description: "Allow HTTPS access to EKS cluster from Bastion Host"

Outputs:
  BastionPublicIP:
    Description: Public IP of the Bastion Host
    Value: !GetAtt BastionHost.PublicIp

  SSHCommand:
    Description: Command to SSH to bastion host
    Value: !Sub "ssh -i ${KeyName}.pem ec2-user@${BastionHost.PublicIp}"

  DatabaseTunnelCommand:
    Description: Command to create SSH tunnel for PostgreSQL
    Value: !Sub 
      - "ssh -N -L 5432:${dbEndpoint}:5432 -i ${KeyName}.pem ec2-user@${BastionHost.PublicIp}"
      - dbEndpoint: !ImportValue 
          Fn::Sub: ${DatabaseStackName}-db-endpoint

  PSQLCommand:
    Description: PSQL connection command (after tunnel is established)
    Value: !Sub 
      - "psql -h localhost -U ${dbuser} -d ${dbname}"
      - dbuser: !ImportValue 
          Fn::Sub: ${DatabaseStackName}-dbusername
        dbname: !ImportValue 
          Fn::Sub: ${DatabaseStackName}-db-name

  TenantApiCommand:
    Description: Command to access tenant API through local port forwarding
    Value: !Sub 
      - |
        # First establish port forwarding
        kubectl port-forward pod/sdp 8003:8003

        # Then in another terminal, use the API
        curl -X POST http://localhost:8003/tenants/ \
          -H "Content-Type: application/json" \
          -H "Authorization: Basic $(echo -n 'admin:api_key_1234567890' | base64)" \
          -d '{"name": "acmeorg", "owner_email": "john@stellar.org", "owner_first_name": "john", "owner_last_name": "doe", "organization_name": "acmeorg"}'
      - podName: !ImportValue
          Fn::Sub: ${EksStackName}-sdp-pod-name