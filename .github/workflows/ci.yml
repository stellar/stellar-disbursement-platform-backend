name: Go

on:
  push:
    branches:
      - main
      - develop
      - "release/**"
      - "releases/**"
      - "hotfix/**"
  pull_request:
  workflow_call: # allows this workflow to be called from another workflow

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22
          cache: true
          cache-dependency-path: go.sum

      - name: golangci-lint
        uses: golangci/golangci-lint-action@3cfe3a4abbb849e10058ce4af15d205b6da42804 # version v4.0.0
        with:
          version: v1.56.2 # this is the golangci-lint version
          args: --timeout 5m0s
          skip-build-cache: true
          skip-pkg-cache: true

      - name: Run ./gomod.sh
        run: ./gomod.sh

      - name: Install github.com/nishanths/exhaustive and golang.org/x/tools/cmd/deadcode@latest
        run: |
          go install github.com/nishanths/exhaustive/cmd/exhaustive@latest
          go install golang.org/x/tools/cmd/deadcode@latest

      - name: Run `exhaustive`
        run: exhaustive -default-signifies-exhaustive ./...

      - name: Run `deadcode`
        run: |
          output=$(deadcode -test ./...)
          if [[ -n "$output" ]]; then
            echo "ðŸš¨ Deadcode found:"
            echo "$output"
            exit 1
          else
            echo "âœ… No deadcode found"
          fi

  check-helm-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install NodeJs
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install Helm Readme Generator (@bitnami/readme-generator-for-helm)
        run: npm install -g @bitnami/readme-generator-for-helm

      - name: Generate README.md for comparison
        run: readme-generator -v helmchart/sdp/values.yaml -r helmchart/sdp/README.md

      - name: Check if helmchart/sdp/README.md is in sync with helmchart/sdp/values.yaml
        run: |
          if git diff --exit-code --stat helmchart/sdp/README.md; then
            echo "âœ… helmchart/sdp/README.md is in sync with helmchart/sdp/values.yaml"
          else
            echo "ðŸš¨ helmchart/sdp/README.md needs to be re-generated!"
            echo "Run 'readme-generator -v helmchart/sdp/values.yaml -r helmchart/sdp/README.md' locally and commit the changes."
            echo "Refer to https://github.com/bitnami/readme-generator-for-helm for more information."
            exit 1
          fi

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22
          cache: true
          cache-dependency-path: go.sum

      - name: Build Project
        run: go build ./...

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          PGHOST: localhost
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      PGHOST: localhost
      PGPORT: 5432
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: postgres
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres?sslmode=disable

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22
          cache: true
          cache-dependency-path: go.sum

      - name: Run tests
        run: go test -race -timeout 3m -coverpkg=./... -coverprofile=c.out ./...

      - name: Validate Test Coverage Threshold
        env:
          TESTCOVERAGE_THRESHOLD: 84 # percentage
        run: |
          echo "Quality Gate:   Checking if test coverage is above threshold..."
          echo "Threshold:      $TESTCOVERAGE_THRESHOLD%"
          totalCoverage=`./scripts/exclude_from_coverage.sh && go tool cover -func=c.out  | grep total: | grep -Eo '[0-9]+\.[0-9]+'`
          echo "Test Coverage:  $totalCoverage%"
          echo "-------------------------"
          if (( $(echo "$totalCoverage $TESTCOVERAGE_THRESHOLD" | awk '{print ($1 >= $2)}') )); then
            echo "        $totalCoverage% > $TESTCOVERAGE_THRESHOLD%"
            echo "Current test coverage is above threshold ðŸŽ‰ðŸŽ‰ðŸŽ‰! Please keep up the good work!"
          else
            echo "        $totalCoverage% < $TESTCOVERAGE_THRESHOLD%"
            echo "ðŸš¨ Current test coverage is below threshold ðŸ˜±! Please add more unit tests or adjust threshold to a lower value."
            echo "Failed ðŸ˜­"
            exit 1
          fi

  complete:
    if: always()
    needs: [check, check-helm-readme, build, test]
    runs-on: ubuntu-latest
    steps:
      - if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: exit 1
