name: Internal SEP Services Validation
# this workflow tests basic internal SEP services of SDP
# more advanced tests are done in the e2e_integration_test.yml workflow

on:
  push:
    branches:
      - main
  pull_request:
  workflow_call:

permissions:
  contents: read

jobs:
  internal-sep-validation:
    runs-on: ubuntu-latest
    # environment: "Internal SEP Tests"
    environment: "Anchor Integration Tests"
    env:
      DISTRIBUTION_PUBLIC_KEY: ${{ vars.DISTRIBUTION_PUBLIC_KEY }}
      DISTRIBUTION_SEED: ${{ vars.DISTRIBUTION_SEED }}
      CHANNEL_ACCOUNT_ENCRYPTION_PASSPHRASE: ${{ vars.DISTRIBUTION_SEED }}
      DISTRIBUTION_ACCOUNT_ENCRYPTION_PASSPHRASE: ${{ vars.DISTRIBUTION_SEED }}
      SEP10_SIGNING_PUBLIC_KEY: ${{ vars.SEP10_SIGNING_PUBLIC_KEY }}
      SEP10_SIGNING_PRIVATE_KEY: ${{ vars.SEP10_SIGNING_PRIVATE_KEY }}
      ENABLE_ANCHOR_PLATFORM: "false"
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Run Docker Compose for SDP with Internal SEP
        working-directory: internal/integrationtests/docker
        run: |
          export BASE_URL="http://stellar.local:8000"
          docker compose -f docker-compose-e2e-tests.yml down
          docker compose -f docker-compose-e2e-tests.yml up --build -d

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y curl jq

      - name: Wait for SDP to be ready
        timeout-minutes: 5
        run: |
          until curl --output /dev/null --silent --fail \
            http://localhost:8000/health; do
            echo 'Waiting for SDP to be up and running...'
            sleep 5
          done
          echo 'SDP is up and running.'

      - name: Test stellar.toml
        run: |
          TOML=$(curl -s -H "SDP-Tenant-Name: integration-tests" "http://localhost:8000/.well-known/stellar.toml")
          echo "Stellar TOML received"
          
          # Verify it points to internal endpoints when AP is disabled
          if echo "$TOML" | grep -q "TRANSFER_SERVER.*localhost:8000"; then
            echo "✅ TOML correctly points to internal SEP-24 endpoints"
          else
            echo "❌ TOML does not point to internal endpoints"
            exit 1
          fi
          
          if echo "$TOML" | grep -q "WEB_AUTH_ENDPOINT.*localhost:8000/auth"; then
            echo "✅ TOML correctly points to internal SEP-10 endpoint"
          else
            echo "❌ TOML does not point to internal SEP-10 endpoint"
            exit 1
          fi

      - name: Test SEP-10 authentication endpoints
        run: |
          echo "=== Testing SEP-10 GET /auth endpoint ==="
          
          # Test 1: Valid request without client_domain
          echo "Test 1: Valid request without client_domain"
          CHALLENGE=$(curl -s "http://localhost:8000/auth?account=GCDYFAJSZPH3RCXL6NWMMOY54CXNUBYFTDCBW7GGG6VPBW3WSDKSB2NU")
          if echo $CHALLENGE | jq -e '.transaction' > /dev/null 2>&1; then
            echo "✅ Transaction field present"
          else
            echo "❌ Transaction field missing"
            echo "Response: $CHALLENGE"
            exit 1
          fi
          if echo $CHALLENGE | jq -e '.network_passphrase' > /dev/null 2>&1; then
            echo "✅ Network passphrase field present"
          else
            echo "❌ Network passphrase field missing"
            exit 1
          fi
          
          # Test 2: Valid request with client_domain
          echo -e "\nTest 2: Valid request with client_domain"
          CHALLENGE_WITH_CLIENT=$(curl -s "http://localhost:8000/auth?account=GCDYFAJSZPH3RCXL6NWMMOY54CXNUBYFTDCBW7GGG6VPBW3WSDKSB2NU&client_domain=demo-wallet-server.stellar.org")
          if echo $CHALLENGE_WITH_CLIENT | jq -e '.transaction' > /dev/null 2>&1; then
            echo "✅ Transaction with client_domain received"
          else
            echo "❌ Failed to get transaction with client_domain"
            exit 1
          fi
          
          # Test 3: Invalid account format
          echo -e "\nTest 3: Invalid account format (should fail)"
          INVALID_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" "http://localhost:8000/auth?account=invalid_account")
          HTTP_STATUS=$(echo "$INVALID_RESPONSE" | grep "HTTP_STATUS:" | cut -d: -f2)
          if [ "$HTTP_STATUS" = "400" ]; then
            echo "✅ Correctly rejected invalid account with 400"
          else
            echo "❌ Should have returned 400 for invalid account, got $HTTP_STATUS"
            exit 1
          fi
          
          # Test 4: Missing account parameter
          echo -e "\nTest 4: Missing account parameter (should fail)"
          MISSING_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" "http://localhost:8000/auth")
          HTTP_STATUS=$(echo "$MISSING_RESPONSE" | grep "HTTP_STATUS:" | cut -d: -f2)
          if [ "$HTTP_STATUS" = "400" ]; then
            echo "✅ Correctly rejected missing account with 400"
          else
            echo "❌ Should have returned 400 for missing account, got $HTTP_STATUS"
            exit 1
          fi
          
          # Test 5: Test with memo parameter
          echo -e "\nTest 5: Request with memo parameter"
          CHALLENGE_WITH_MEMO=$(curl -s "http://localhost:8000/auth?account=GCDYFAJSZPH3RCXL6NWMMOY54CXNUBYFTDCBW7GGG6VPBW3WSDKSB2NU&memo=12345")
          if echo $CHALLENGE_WITH_MEMO | jq -e '.transaction' > /dev/null 2>&1; then
            echo "✅ Transaction with memo received"
          else
            echo "❌ Failed to get transaction with memo"
            exit 1
          fi

      - name: Test SEP-24 endpoints
        run: |
          echo "=== Testing SEP-24 endpoints ==="
          
          # Test 1: SEP-24 /info endpoint
          echo "Test 1: SEP-24 /info endpoint"
          INFO=$(curl -s -H "SDP-Tenant-Name: integration-tests" "http://localhost:8000/sep24/info")
          
          # Validate info response structure
          if echo $INFO | jq -e '.deposit' > /dev/null 2>&1; then
            echo "✅ Deposit field present in info"
          else
            echo "❌ Deposit field missing in info"
            echo "Response: $INFO"
            exit 1
          fi

          # Check if deposit is enabled for at least one asset
          DEPOSIT_ENABLED=$(echo $INFO | jq -r '.deposit | to_entries | map(.value.enabled) | any')
          if [ "$DEPOSIT_ENABLED" = "true" ]; then
            echo "✅ At least one deposit asset is enabled"
          else
            echo "❌ No deposit assets are enabled"
            exit 1
          fi
          
          # Test 2: SEP-24 /transaction endpoint without auth
          echo -e "\nTest 2: SEP-24 /transaction without auth"
          TRANS_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -H "SDP-Tenant-Name: integration-tests" "http://localhost:8000/sep24/transaction?id=test-id")
          HTTP_STATUS=$(echo "$TRANS_RESPONSE" | grep "HTTP_STATUS:" | cut -d: -f2)
          if [ "$HTTP_STATUS" = "401" ] || [ "$HTTP_STATUS" = "403" ]; then
            echo "✅ Correctly rejected unauthorized request with $HTTP_STATUS"
          else
            echo "❌ Should have returned 401/403 for unauthorized transaction request, got $HTTP_STATUS"
            exit 1
          fi
          
          # Test 3: SEP-24 /transactions/deposit/interactive without auth
          echo -e "\nTest 3: SEP-24 deposit without auth"
          DEPOSIT_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST -H "SDP-Tenant-Name: integration-tests" -H "Content-Type: application/json" -d '{"asset_code":"USDC","account":"GCDYFAJSZPH3RCXL6NWMMOY54CXNUBYFTDCBW7GGG6VPBW3WSDKSB2NU"}' "http://localhost:8000/sep24/transactions/deposit/interactive")
          HTTP_STATUS=$(echo "$DEPOSIT_RESPONSE" | grep "HTTP_STATUS:" | cut -d: -f2)
          if [ "$HTTP_STATUS" = "401" ] || [ "$HTTP_STATUS" = "403" ]; then
            echo "✅ Correctly rejected unauthorized deposit with $HTTP_STATUS"
          else
            echo "❌ Should have returned 401/403 for unauthorized deposit, got $HTTP_STATUS"
            exit 1
          fi

      - name: Docker logs
        if: always()
        working-directory: internal/integrationtests/docker
        run: |
          docker compose -f docker-compose-e2e-tests.yml logs
          docker compose -f docker-compose-e2e-tests.yml down