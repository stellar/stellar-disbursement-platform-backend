// Code generated by mockery v2.53.3. DO NOT EDIT.

package provisioning

import (
	context "context"

	tenant "github.com/stellar/stellar-disbursement-platform-backend/stellar-multitenant/pkg/tenant"
	mock "github.com/stretchr/testify/mock"
)

// MockTenantProvisioningServiceInterface is an autogenerated mock type for the TenantProvisioningService type
type MockTenantProvisioningServiceInterface struct {
	mock.Mock
}

// ProvisionNewTenant provides a mock function with given fields: ctx, pt
func (_m *MockTenantProvisioningServiceInterface) ProvisionNewTenant(ctx context.Context, pt ProvisionTenant) (*tenant.Tenant, error) {
	ret := _m.Called(ctx, pt)

	if len(ret) == 0 {
		panic("no return value specified for ProvisionNewTenant")
	}

	var r0 *tenant.Tenant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ProvisionTenant) (*tenant.Tenant, error)); ok {
		return rf(ctx, pt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ProvisionTenant) *tenant.Tenant); ok {
		r0 = rf(ctx, pt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tenant.Tenant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ProvisionTenant) error); ok {
		r1 = rf(ctx, pt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockTenantProvisioningServiceInterface creates a new instance of MockTenantProvisioningServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTenantProvisioningServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTenantProvisioningServiceInterface {
	mock := &MockTenantProvisioningServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
